

--- File: ./tailwind.config.js ---

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}



--- File: ./postcss.config.js ---

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


--- File: ./public/index.html ---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>


--- File: ./src/App.css ---

.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


--- File: ./src/index.css ---

@tailwind base;
@tailwind components;
@tailwind utilities;

--- File: ./src/App.test.tsx ---

import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


--- File: ./src/index.tsx ---

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <App />
);

reportWebVitals();


--- File: ./src/App.tsx ---

import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';
import { AuthProvider, useAuth } from './context/AuthContext';
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import SlackInterface from './components/SlackInterface';
import './App.css';
import { onAuthStateChanged } from 'firebase/auth';
import { auth } from './services/firebase'; // Updated import path

const ProtectedRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { user } = useAuth();
  if (!user) {
    return <Navigate to="/login" replace />;
  }
  return <>{children}</>;
};

const PublicRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { user } = useAuth();
  if (user) {
    return <Navigate to="/" replace />;
  }
  return <>{children}</>;
};

function App() {
  const [isLoading, setIsLoading] = useState(true);
  const { setUser } = useAuth();

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setUser(user);
      setIsLoading(false);
    });
    return () => unsubscribe();
  }, [setUser]);

  if (isLoading) {
    return <div>Loading...</div>;
  }

  return (
    <Router>
      <div className="App">
        <Routes>
          <Route path="/login" element={
            <PublicRoute>
              <LoginPage />
            </PublicRoute>
          } />
          <Route path="/register" element={
            <PublicRoute>
              <RegisterPage />
            </PublicRoute>
          } />
          <Route path="/" element={
            <ProtectedRoute>
              <SlackInterface />
            </ProtectedRoute>
          } />
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </div>
    </Router>
  );
}

const AppWithAuth: React.FC = () => (
  <AuthProvider>
    <App />
  </AuthProvider>
);

export default AppWithAuth;


--- File: ./src/setupTests.ts ---

// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


--- File: ./src/react-app-env.d.ts ---

/// <reference types="react-scripts" />


--- File: ./src/reportWebVitals.ts ---

import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


--- File: ./src/tests/fetchUsersTest.ts ---

import { fetchUsers } from '../services/chat';

async function testFetchUsers() {
  try {
    const companyId = 'default'; // Replace with an actual company ID
    console.log(`Fetching users for company: ${companyId}`);
    const users = await fetchUsers(companyId);
    console.log('Fetched users:', users);
  } catch (error) {
    console.error('Error fetching users:', error);
  }
}

testFetchUsers();

--- File: ./src/components/SlackInterface.tsx ---

import React, { useState, useEffect } from 'react'
import { useAuth } from '../context/AuthContext'
import { useNavigate } from 'react-router-dom'
import { fetchUsers, fetchMessages, sendMessage } from '../services/chat'
import { Hash, Plus, Send, Menu, Sun, Moon } from "lucide-react"
import { CustomUser } from '../types/user'

interface Message {
  id: string;
  content: string;
  timestamp: number;
  userId: string;
}

export default function SlackInterface() {
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  const [currentChannel, setCurrentChannel] = useState('general')
  const [message, setMessage] = useState('')
  const [messages, setMessages] = useState<Message[]>([])
  const [users, setUsers] = useState<{[key: string]: CustomUser}>({})

  const channels = ['general', 'random', 'announcements', 'project-a', 'project-b']
  
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false)
  const [isDarkMode, setIsDarkMode] = useState(false)
  const [isDirectMessageModalOpen, setIsDirectMessageModalOpen] = useState(false);
  const [lastMessageTimestamp, setLastMessageTimestamp] = useState<number | null>(null);

  useEffect(() => {
    if (!user) return;

    const loadUsers = async () => {
      try {
        const companyId = (user as CustomUser).companyId || 'default';
        const fetchedUsers = await fetchUsers(companyId);
        if (Object.keys(fetchedUsers).length === 0) {
          console.log("No users found for company:", companyId);
        } else {
          setUsers(fetchedUsers);
          console.log("Users loaded in SlackInterface:", fetchedUsers);
        }
      } catch (error) {
        console.error("Failed to fetch users:", error);
        // You might want to set an error state here and display it to the user
      }
    };

    loadUsers();

    const unsubscribe = fetchMessages(currentChannel, (newMessage) => {
      setMessages(prevMessages => [...prevMessages, newMessage]);
      setLastMessageTimestamp(newMessage.timestamp);
    }, lastMessageTimestamp);

    return () => {
      unsubscribe();
    };
  }, [currentChannel, user, lastMessageTimestamp]);

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault()
    if (message.trim() && user) {
      const newMessage = {
        content: message,
        timestamp: Date.now(),
        userId: user.uid,
      }
      try {
        await sendMessage(currentChannel, newMessage);
        setMessage('');
      } catch (error) {
        console.error("Failed to send message:", error);
        // Handle error (e.g., show error message to user)
      }
    }
  }

  const handleStartDirectMessage = async (userId: string) => {
    if (!user) return;

    const channelId = [user.uid, userId].sort().join('_');
    setCurrentChannel(`dm_${channelId}`);
    setIsDirectMessageModalOpen(false);
  };

  const handleLogout = async () => {
    try {
      await logout();
      navigate('/login');
    } catch (error) {
      console.error("Failed to log out", error);
    }
  };

  const toggleMobileMenu = () => setIsMobileMenuOpen(!isMobileMenuOpen)

  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode)
    document.documentElement.classList.toggle('dark')
  }

  const handleFetchUsers = async () => {
    try {
      const companyId = (user as CustomUser).companyId || 'default';
      const fetchedUsers = await fetchUsers(companyId);
      console.log("Fetched users:", fetchedUsers);
      setUsers(fetchedUsers);
    } catch (error) {
      console.error("Failed to fetch users:", error);
    }
  };

  return (
    <div className={`flex h-screen ${isDarkMode ? 'dark' : ''}`}>
      {/* Sidebar */}
      <div className={`w-64 bg-gray-900 text-gray-300 flex-col ${isMobileMenuOpen ? 'flex' : 'hidden'} md:flex`}>
        <div className="p-4 border-b border-gray-700 flex items-center justify-between">
          <div className="flex items-center">
            <img src="/qeek-logo.png" alt="QEK Logo" className="h-8 w-auto mr-2" />
          </div>
          <button onClick={toggleDarkMode} className="text-gray-300 hover:text-white">
            {isDarkMode ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
          </button>
        </div>
        <div className="overflow-y-auto flex-grow">
          <div className="p-4">
            <h2 className="text-lg font-semibold mb-2 flex items-center justify-between text-gray-100">
              Channels
              <button className="text-gray-400 hover:text-white hover:bg-gray-700 p-1 rounded">
                <Plus className="h-4 w-4" />
              </button>
            </h2>
            <ul>
              {channels.map((channel) => (
                <li key={channel} className="mb-1">
                  <button 
                    className={`w-full text-left px-2 py-1 rounded ${currentChannel === channel ? 'bg-gray-700 text-white' : 'text-gray-300 hover:text-white hover:bg-gray-700'}`}
                    onClick={() => setCurrentChannel(channel)}
                  >
                    <Hash className="inline h-4 w-4 mr-2" />
                    {channel}
                  </button>
                </li>
              ))}
            </ul>
            <h2 className="text-lg font-semibold mt-6 mb-2 flex items-center justify-between text-gray-100">
              Direct Messages
              <button 
                className="text-gray-400 hover:text-white hover:bg-gray-700 p-1 rounded"
                onClick={() => setIsDirectMessageModalOpen(true)}
              >
                <Plus className="h-4 w-4" />
              </button>
            </h2>
            <ul>
              {Object.entries(users).map(([userId, userData]) => (
                <li key={userId} className="mb-1">
                  <button 
                    className="w-full text-left px-2 py-1 rounded text-gray-300 hover:text-white hover:bg-gray-700"
                    onClick={() => handleStartDirectMessage(userId)}
                  >
                    <div className="flex items-center">
                      <img 
                        src={userData.photoURL || '/placeholder.svg?height=40&width=40'} 
                        alt={userData.displayName || 'User'} 
                        className="w-6 h-6 rounded-full mr-2" 
                      />
                      {userData.displayName}
                    </div>
                  </button>
                </li>
              ))}
            </ul>
          </div>
        </div>  
        <div className="p-4 border-t border-gray-700">
          <button onClick={handleLogout} className="w-full text-left px-2 py-1 rounded text-red-500 hover:text-red-400 hover:bg-gray-700">
            Sign out
          </button>
        </div>
      </div>

      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col bg-white dark:bg-gray-800">
        {/* Channel Header */}
        <div className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 p-4 flex items-center justify-between">
          <div className="flex items-center">
            <button className="mr-2 md:hidden" onClick={toggleMobileMenu}>
              <Menu className="h-6 w-6" />
            </button>
            <Hash className="h-6 w-6 mr-2 text-gray-500 dark:text-gray-400" />
            <h2 className="text-xl font-semibold text-gray-800 dark:text-white">
              {currentChannel}
            </h2>
          </div>
        </div>

        {/* Messages */}
        <div className="flex-1 overflow-y-auto p-4">
          {messages.map((message) => (
            <div key={message.id} className="mb-4">
              <div className="flex items-start">
                <div className="flex-1">
                  <div className="flex items-center mb-1">
                    <span className="font-bold text-gray-900 dark:text-white mr-2">{message.userId}</span>
                    <span className="text-sm text-gray-500 dark:text-gray-400">{new Date(message.timestamp).toLocaleTimeString()}</span>
                  </div>
                  <p className="text-gray-800 dark:text-gray-200">{message.content}</p>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Message Input */}
        <div className="p-4 border-t border-gray-200 dark:border-gray-700">
          <form onSubmit={handleSendMessage} className="flex items-center">
            <input
              type="text"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              placeholder={`Message #${currentChannel}`}
              className="flex-1 mr-2 p-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <button type="submit" className="p-2 rounded-md bg-blue-500 text-white hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
              <Send className="h-5 w-5" />
            </button>
          </form>
        </div>
      </div>

      {/* Direct Message Modal */}
      {isDirectMessageModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
          <div className="bg-white dark:bg-gray-800 p-4 rounded-lg w-full max-w-md">
            <h2 className="text-lg font-semibold mb-2">Start a Direct Message</h2>
            {/* We need to implement a way to fetch and display users for direct messaging */}
            <button 
              onClick={() => setIsDirectMessageModalOpen(false)} 
              className="mt-4 px-4 py-2 bg-gray-300 dark:bg-gray-600 rounded hover:bg-gray-400 dark:hover:bg-gray-500"
            >
              Cancel
            </button>
          </div>
        </div>
      )}

      {/* Add this button somewhere in your component's JSX */}
      <button 
        onClick={handleFetchUsers}
        className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
      >
        Fetch Users
      </button>
    </div>
  )
}


--- File: ./src/components/Auth/Login.tsx ---

import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';
import { useNavigate, Link } from 'react-router-dom';
import { AlertCircle } from "lucide-react";

const Login: React.FC<{ onSuccess: () => void }> = ({ onSuccess }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [rememberMe, setRememberMe] = useState(false);
  const [error, setError] = useState('');
  const { login, googleSignIn } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    if (!email || !password) {
      setError('Please fill in all fields');
      return;
    }
    try {
      await login(email, password);
      onSuccess();
    } catch (err) {
      setError('Failed to log in');
    }
  };

  const handleGoogleSignIn = async () => {
    try {
      await googleSignIn();
      onSuccess();
    } catch (err) {
      setError('Failed to sign in with Google');
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-md bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <div className="space-y-1 mb-4">
          <h2 className="text-2xl font-bold">Login</h2>
          <p className="text-sm text-gray-500 dark:text-gray-400">Enter your email and password to login to your account</p>
        </div>
        <form onSubmit={handleSubmit}>
          <div className="space-y-4">
            {error && (
              <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                <AlertCircle className="h-4 w-4 inline mr-2" />
                <span className="block sm:inline">{error}</span>
              </div>
            )}
            <div className="space-y-2">
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 dark:text-gray-200">Email</label>
              <input
                id="email"
                type="email"
                placeholder="m@example.com"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>
            <div className="space-y-2">
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 dark:text-gray-200">Password</label>
              <input
                id="password"
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>
            <div className="flex items-center space-x-2">
              <input
                type="checkbox"
                id="remember"
                checked={rememberMe}
                onChange={(e) => setRememberMe(e.target.checked)}
                className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
              />
              <label htmlFor="remember" className="text-sm text-gray-700 dark:text-gray-200">Remember me</label>
            </div>
          </div>
          <button type="submit" className="w-full mt-6 px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            Login
          </button>
        </form>
        <div className="mt-4">
          <button
            onClick={handleGoogleSignIn}
            className="w-full px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
          >
            Sign in with Google
          </button>
        </div>
        <div className="mt-4">
          <p className="text-sm text-gray-600 dark:text-gray-400">
            Don't have an account?{' '}
            <Link to="/register" className="text-indigo-600 hover:underline dark:text-indigo-400">
              Register
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
};

export default Login;


--- File: ./src/components/Auth/Register.tsx ---

import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';
import { useNavigate, Link } from 'react-router-dom';
import { AlertCircle } from "lucide-react";

const Register: React.FC = () => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState('');
  const [passwordError, setPasswordError] = useState('');
  const { register, googleSignIn } = useAuth();
  const navigate = useNavigate();

  const validatePassword = (password: string) => {
    const minLength = 8;
    const hasUpperCase = /[A-Z]/.test(password);
    const hasLowerCase = /[a-z]/.test(password);
    const hasNumbers = /\d/.test(password);
    const hasNonalphas = /\W/.test(password);
    if (password.length < minLength) {
      return "Password must be at least 8 characters long.";
    } else if (!(hasUpperCase && hasLowerCase && hasNumbers && hasNonalphas)) {
      return "Password must contain an uppercase letter, lowercase letter, number, and special character.";
    }
    return "";
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    if (!name || !email || !password || !confirmPassword) {
      setError('Please fill in all fields');
      return;
    }
    if (password !== confirmPassword) {
      setError('Passwords do not match');
      return;
    }
    const passwordValidationError = validatePassword(password);
    if (passwordValidationError) {
      setPasswordError(passwordValidationError);
      return;
    }
    try {
      await register(email, password);
      navigate('/');
    } catch (err) {
      setError('Failed to create an account');
    }
  };

  const handleGoogleSignUp = async () => {
    try {
      await googleSignIn();
      navigate('/');
    } catch (err) {
      setError('Failed to sign up with Google');
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-md bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <div className="space-y-1 mb-4">
          <h2 className="text-2xl font-bold">Create an account</h2>
          <p className="text-sm text-gray-500 dark:text-gray-400">Enter your details to create your account</p>
        </div>
        <form onSubmit={handleSubmit}>
          <div className="space-y-4">
            {error && (
              <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                <AlertCircle className="h-4 w-4 inline mr-2" />
                <span className="block sm:inline">{error}</span>
              </div>
            )}
            <div className="space-y-2">
              <label htmlFor="name" className="block text-sm font-medium text-gray-700 dark:text-gray-200">Full Name</label>
              <input
                id="name"
                type="text"
                placeholder="John Doe"
                value={name}
                onChange={(e) => setName(e.target.value)}
                required
                className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>
            <div className="space-y-2">
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 dark:text-gray-200">Email</label>
              <input
                id="email"
                type="email"
                placeholder="m@example.com"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>
            <div className="space-y-2">
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 dark:text-gray-200">Password</label>
              <input
                id="password"
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>
            <div className="space-y-2">
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 dark:text-gray-200">Confirm Password</label>
              <input
                id="confirmPassword"
                type="password"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                required
                className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>
          </div>
          <button 
            type="submit" 
            className="w-full mt-6 px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            Register
          </button>
        </form>
        <div className="mt-4">
          <button
            onClick={handleGoogleSignUp}
            className="w-full px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
          >
            Sign up with Google
          </button>
        </div>
        <div className="mt-4">
          <p className="text-sm text-gray-600 dark:text-gray-400">
            Already have an account?{' '}
            <Link to="/login" className="text-indigo-600 hover:underline dark:text-indigo-400">
              Login
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
};

export default Register;


--- File: ./src/services/firebase.ts ---

import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getDatabase } from "firebase/database";
import { getFunctions } from "firebase/functions";

const firebaseConfig = {
  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,
  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,
  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,
  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,
  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.REACT_APP_FIREBASE_APP_ID
};

// Add this check to prevent initialization with undefined values
if (!process.env.REACT_APP_FIREBASE_API_KEY) {
  throw new Error('Firebase API key is missing. Check your .env file.');
}

const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
export const database = getDatabase(app);
export const functions = getFunctions(app);


--- File: ./src/services/chat.ts ---

import { database, auth } from './firebase';
import { ref, push, onChildAdded, off, get, set, query, orderByChild, startAfter, limitToFirst, limitToLast } from "firebase/database";
import { getFunctions, httpsCallable, HttpsCallableResult } from 'firebase/functions';
import { CustomUser } from '../types/user';

export const fetchUsers = async (companyId: string): Promise<{ [key: string]: CustomUser }> => {
  try {
    console.log("Fetching users for company:", companyId);
    const user = auth.currentUser;
    console.log("Current user:", user);
    
    if (!user) {
      throw new Error('User not authenticated');
    }

    const functions = getFunctions();
    const getUsers = httpsCallable(functions, 'getUsers');
    
    console.log("Calling getUsers function");
    const result: HttpsCallableResult = await getUsers({ companyId });
    console.log("Raw result from getUsers:", result);
    
    if (result.data === null || typeof result.data !== 'object') {
      console.log("No users found or unexpected response format");
      return {};
    }
    
    console.log("Fetched users:", result.data);
    return result.data as { [key: string]: CustomUser };
  } catch (error) {
    console.error("Error fetching users:", error);
    if (error instanceof Error) {
      console.error("Error details:", error.stack);
      throw new Error(`Failed to fetch users: ${error.message}`);
    } else {
      console.error("Unknown error object:", error);
      throw new Error('An unknown error occurred while fetching users');
    }
  }
};

export const createUser = async (userId: string, userData: any) => {
  try {
    console.log("Creating user:", userId, userData);
    const userRef = ref(database, `users/${userId}`);
    await set(userRef, userData);
    console.log("User created successfully");
  } catch (error) {
    console.error("Error creating user:", error);
    throw error;
  }
};

export const fetchMessages = (channelId: string, callback: (message: any) => void, lastTimestamp: number | null = null) => {
  const messagesRef = ref(database, `channels/${channelId}/messages`);
  let messageQuery;
  if (lastTimestamp) {
    messageQuery = query(messagesRef, orderByChild('timestamp'), startAfter(lastTimestamp), limitToFirst(20));
  } else {
    messageQuery = query(messagesRef, orderByChild('timestamp'), limitToLast(20));
  }
  const unsubscribe = onChildAdded(messageQuery, (snapshot) => {
    const messageData = snapshot.val();
    console.log("New message received:", messageData);
    callback({...messageData, id: snapshot.key});
  });
  return () => {
    console.log(`Unsubscribing from messages for channel: ${channelId}`);
    off(messagesRef, 'child_added', unsubscribe);
  };
};

export const sendMessage = async (channelId: string, message: any) => {
  try {
    console.log(`Sending message to channel: ${channelId}`, message);
    const messagesRef = ref(database, `channels/${channelId}/messages`);
    await push(messagesRef, message);
    console.log("Message sent successfully");
  } catch (error) {
    console.error("Error sending message:", error);
    throw error;
  }
};

// Expose fetchUsers globally for testing
(window as any).fetchUsers = fetchUsers;

// Add this at the end of the file
(window as any).testFetchUsers = async (companyId: string) => {
  try {
    const users = await fetchUsers(companyId);
    console.log('Fetched users:', users);
  } catch (error) {
    console.error('Error fetching users:', error);
  }
};


--- File: ./src/services/auth.ts ---

import { auth, database } from './firebase';
import { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from "firebase/auth";
import { ref, set } from "firebase/database";
import { CustomUser } from '../types/user';

export const registerUser = async (email: string, password: string) => {
  try {
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const user = userCredential.user as CustomUser;
    user.companyId = 'default';
    await saveUserToDatabase(user);
    return user;
  } catch (error) {
    console.error("Error registering user:", error);
    throw error;
  }
};

export const loginUser = async (email: string, password: string) => {
  try {
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    const user = userCredential.user as CustomUser;
    user.companyId = 'default'; // You might want to fetch this from the database instead
    await saveUserToDatabase(user);
    return user;
  } catch (error) {
    console.error("Error logging in user:", error);
    throw error;
  }
};

export const logoutUser = async () => {
  try {
    await signOut(auth);
  } catch (error) {
    console.error("Error logging out user:", error);
    throw error;
  }
};

const saveUserToDatabase = async (user: CustomUser) => {
  try {
    const userRef = ref(database, `users/${user.uid}`);
    await set(userRef, {
      displayName: user.displayName || 'Anonymous',
      email: user.email,
      photoURL: user.photoURL || '/placeholder.svg?height=40&width=40',
      companyId: user.companyId || 'default'
    });
    console.log("User saved to database successfully");
  } catch (error) {
    console.error("Error saving user to database:", error);
    throw error;
  }
};

export const createUserRecord = async (user: any, companyId: string) => {
  if (user) {
    const userRef = ref(database, `users/${user.uid}`);
    await set(userRef, {
      email: user.email,
      companyId: companyId,
      // Add any other relevant user data here
    });
  }
};

export const signUp = async (email: string, password: string, companyId: string) => {
  const userCredential = await createUserWithEmailAndPassword(auth, email, password);
  await createUserRecord(userCredential.user, companyId);
};

export const login = async (email: string, password: string, companyId: string) => {
  const userCredential = await signInWithEmailAndPassword(auth, email, password);
  await createUserRecord(userCredential.user, companyId);
};


--- File: ./src/context/AuthContext.tsx ---

import React, { createContext, useContext, useEffect, useState } from 'react';
import { 
  User, 
  UserCredential, 
  onAuthStateChanged, 
  signInWithPopup, 
  GoogleAuthProvider,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  signOut,
  updateProfile
} from 'firebase/auth';
import { auth } from '../services/firebase';
import { registerUser, loginUser, logoutUser } from '../services/auth';
import { ref, set } from 'firebase/database';
import { database } from '../services/firebase';
import { CustomUser } from '../types/user';

const googleProvider = new GoogleAuthProvider();

interface AuthContextProps {
  user: CustomUser | null;
  setUser: React.Dispatch<React.SetStateAction<CustomUser | null>>;
  login: (email: string, password: string) => Promise<UserCredential>;
  register: (email: string, password: string) => Promise<UserCredential>;
  logout: () => Promise<void>;
  googleSignIn: () => Promise<UserCredential>;
}

const AuthContext = createContext<AuthContextProps | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<CustomUser | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      console.log("Auth state changed. User:", user);
      setUser(user as CustomUser);
      setLoading(false);
    });
    return unsubscribe;
  }, []);

  const login = async (email: string, password: string) => {
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    const user = userCredential.user as CustomUser;
    user.companyId = 'default'; // You might want to fetch this from the database instead
    await saveUserToDatabase(user);
    return userCredential;
  };

  const register = async (email: string, password: string) => {
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const user = userCredential.user as CustomUser;
    user.companyId = 'default';
    await saveUserToDatabase(user);
    return userCredential;
  };

  const logout = () => {
    return signOut(auth);
  };

  const googleSignIn = async () => {
    const provider = new GoogleAuthProvider();
    const userCredential = await signInWithPopup(auth, provider);
    await saveUserToDatabase(userCredential.user as CustomUser);
    return userCredential;
  };

  const saveUserToDatabase = async (user: CustomUser) => {
    const userRef = ref(database, `users/${user.uid}`);
    await set(userRef, {
      displayName: user.displayName || 'Anonymous',
      email: user.email,
      photoURL: user.photoURL || '/placeholder.svg?height=40&width=40',
      companyId: user.companyId || 'default'
    });
  };

  return (
    <AuthContext.Provider value={{ user, setUser, login, register, logout, googleSignIn }}>
      {!loading && children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};


--- File: ./src/types/user.ts ---

import { User as FirebaseUser } from 'firebase/auth';

export interface CustomUser extends FirebaseUser {
  companyId?: string;
}

--- File: ./src/pages/RegisterPage.tsx ---

import React from 'react';
import Register from '../components/Auth/Register';

const RegisterPage: React.FC = () => {
  return <Register />;
};

export default RegisterPage;


--- File: ./src/pages/LoginPage.tsx ---

import React from 'react';
import { useNavigate } from 'react-router-dom';
import Login from '../components/Auth/Login';

const LoginPage: React.FC = () => {
  const navigate = useNavigate();

  const onLoginSuccess = () => {
    navigate('/');
  };

  return <Login onSuccess={onLoginSuccess} />;
};

export default LoginPage;


--- File: ./functions/.eslintrc.js ---

module.exports = {
  root: true,
  env: {
    es6: true,
    node: true,
  },
  extends: [
    'eslint:recommended',
    'google',
  ],
  rules: {
    'indent': ['error', 2],
    'object-curly-spacing': ['error', 'always'],
    'max-len': ['error', { code: 120 }],
  },
};


--- File: ./functions/index.js ---

/**
 * Import function triggers from their respective submodules:
 *
 * const {onCall} = require("firebase-functions/v2/https");
 * const {onDocumentWritten} = require("firebase-functions/v2/firestore");
 *
 * See a full list of supported triggers at https://firebase.google.com/docs/functions
 */

const functions = require("firebase-functions");
const admin = require("firebase-admin");

admin.initializeApp();

// Create and deploy your first functions
// https://firebase.google.com/docs/functions/get-started

exports.api = functions.https.onRequest((request, response) => {
  return cors(request, response, function() {
    console.log('Function invoked with method:', request.method);
    console.log('Request headers:', request.headers);
    console.log('Request body:', request.body);

    if (request.method === 'OPTIONS') {
      // Send response to OPTIONS requests
      response.set('Access-Control-Allow-Methods', 'GET, POST');
      response.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');
      response.set('Access-Control-Max-Age', '3600');
      response.status(204).send('');
      return;
    }

    if (request.method !== 'POST') {
      return response.status(405).send('Method Not Allowed');
    }

    // Verify Firebase ID token
    if (!request.headers.authorization ||
        !request.headers.authorization.startsWith('Bearer ')) {
      console.error('No Authorization header or incorrect format');
      return response.status(403).send('Unauthorized');
    }
    const idToken = request.headers.authorization.split('Bearer ')[1];
    admin.auth().verifyIdToken(idToken)
      .then((decodedToken) => {
        console.log('Token verified for user:', decodedToken.uid);

        const { companyId } = request.body;

        if (!companyId) {
          return response.status(400).send('Company ID is required');
        }

        return admin.database().ref('users')
          .orderByChild('companyId')
          .equalTo(companyId)
          .once('value');
      })
      .then((usersSnapshot) => {
        const users = usersSnapshot.val();
        console.log('Users fetched:', users);
        return response.status(200).json(users || {});
      })
      .catch((error) => {
        console.error('Error:', error);
        return response.status(401).send('Unauthorized: ' + error.message);
      });
  });
});

// Function to add a user
exports.addUser = functions.https.onCall(async (data, context) => {
  console.log("addUser function called");
  console.log("Received data:", JSON.stringify(data));

  try {
    // Check if user is authenticated
    if (!context.auth) {
      throw new functions.https.HttpsError('unauthenticated', 'User must be authenticated to add a user.');
    }

    const { name, email, companyId } = data;

    if (!name || !email || !companyId) {
      throw new functions.https.HttpsError('invalid-argument', 'Name, email, and companyId are required.');
    }

    const userRef = admin.database().ref('users').push();
    await userRef.set({
      name,
      email,
      companyId
    });

    return { success: true, message: 'User added successfully', userId: userRef.key };
  } catch (error) {
    console.error('Error adding user:', error);
    throw new functions.https.HttpsError('internal', 'Error adding user: ' + error.message);
  }
});

// Function to retrieve users by company ID
exports.getUsers = functions.https.onCall(async (data, context) => {
  // Check if user is authenticated
  if (!context.auth) {
    throw new functions.https.HttpsError('unauthenticated', 'User must be authenticated to retrieve users.');
  }

  const { companyId } = data;

  if (!companyId) {
    throw new functions.https.HttpsError('invalid-argument', 'Company ID is required.');
  }

  try {
    const usersSnapshot = await admin.database().ref('users')
      .orderByChild('companyId')
      .equalTo(companyId)
      .once('value');

    const users = usersSnapshot.val();
    return users || {};
  } catch (error) {
    console.error('Error retrieving users:', error);
    throw new functions.https.HttpsError('internal', 'Error retrieving users: ' + error.message);
  }
});

// Function to get all users
exports.getAllUsers = functions.https.onCall(async (data, context) => {
  console.log("getAllUsers function called");

  try {
    // For testing in emulator, we'll pass an empty object if no data is provided
    const requestData = data || {};
    console.log("Request data:", JSON.stringify(requestData));

    // Skip auth check in emulator
    if (!process.env.FUNCTIONS_EMULATOR && !context.auth) {
      throw new functions.https.HttpsError('unauthenticated', 'User must be authenticated to retrieve users.');
    }

    console.log("Fetching all users from database");
    const usersSnapshot = await admin.database().ref('users').once('value');
    const users = usersSnapshot.val();
    
    console.log("Users fetched:", JSON.stringify(users, null, 2));
    return users || {};
  } catch (error) {
    console.error('Error retrieving users:', error);
    throw new functions.https.HttpsError('internal', 'Error retrieving users: ' + error.message);
  }
});
