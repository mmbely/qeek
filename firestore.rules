rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isSuperAdmin() {
      return request.auth.uid == 'RnInDl1twWVwyWWMcEkB1sETtoq1';
    }
    
    function getAccount(accountId) {
      return get(/databases/$(database)/documents/accounts/$(accountId));
    }
    
    function isAccountMember(accountId) {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/accounts/$(accountId)) &&
        get(/databases/$(database)/documents/accounts/$(accountId)).data.members[request.auth.uid] != null;
    }
    
    function isAccountAdmin(accountId) {
      let account = getAccount(accountId);
      return isSignedIn() && 
        exists(/databases/$(database)/documents/accounts/$(accountId)) &&
        ((account.data.members[request.auth.uid] != null && 
          (account.data.members[request.auth.uid].role == 'admin' || 
           account.data.members[request.auth.uid].role == 'owner')) || 
         request.auth.uid == accountId);
    }
    
    function isTicketInAccount(ticketData) {
      return isAccountMember(ticketData.accountId);
    }

    match /tickets/{ticketId} {
      allow read: if isTicketInAccount(resource.data);
      allow create: if isTicketInAccount(request.resource.data);
      allow update: if isTicketInAccount(resource.data) && 
                      isTicketInAccount(request.resource.data) &&
                      resource.data.accountId == request.resource.data.accountId;
      allow delete: if isTicketInAccount(resource.data);
    }

    match /users/{userId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn() && 
        request.auth.uid == userId;
      allow delete: if isSignedIn() && 
        request.auth.uid == userId;
    }

    match /accounts/{accountId} {
      allow read: if isSignedIn() && 
        (resource == null || resource.data.members[request.auth.uid] != null);
      allow create: if isSignedIn() && 
        (!exists(/databases/$(database)/documents/accounts/$(accountId)) || request.auth.uid == accountId);
      allow update: if isSignedIn() && 
        (isAccountMember(accountId) ||
         request.auth.uid == accountId);
    }

    match /messages/{messageId} {
      function isMessageParticipant() {
        let msg = resource.data;
        return isSignedIn() && (
          (msg.participants != null && request.auth.uid in msg.participants) ||
          (msg.channelId.split('_')[0] == 'dm' && 
           (request.auth.uid == msg.channelId.split('_')[1] || 
            request.auth.uid == msg.channelId.split('_')[2])) ||
          (msg.accountId != null && isAccountMember(msg.accountId))
        );
      }

      allow read: if isSignedIn() && (
        resource.data.participants != null && request.auth.uid in resource.data.participants ||
        resource.data.accountId != null && isAccountMember(resource.data.accountId)
      );
      
      allow create: if isSignedIn() && 
        request.resource.data.userId == request.auth.uid &&
        (
          // For DM channels
          (request.resource.data.channelId.matches('^dm_.*') && 
           (request.resource.data.participants == null || 
            request.auth.uid in request.resource.data.participants)) ||
          // For general channel
          (!request.resource.data.channelId.matches('^dm_.*') && 
           isAccountMember(request.resource.data.accountId))
        );

      allow update: if isSignedIn() && 
        (
          // Allow message owner to update the content
          (resource.data.userId == request.auth.uid &&
           request.resource.data.userId == request.auth.uid &&
           request.resource.data.diff(resource.data).affectedKeys()
             .hasOnly(['content', 'edited', 'editedAt'])) ||
          // Allow reaction updates
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['reactions'])
        );
        
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    match /repositories/{repoId} {
      // Allow read/write if user is super admin
      allow read, write: if isSuperAdmin();
      
      // Regular user access
      allow read: if isSignedIn() && (
        !('accountId' in resource.data) ||
        resource.data.accountId == null ||
        isAccountMember(resource.data.accountId)
      );
      
      match /files/{fileId} {
        allow read, write: if isSuperAdmin();
        
        // Regular user access
        allow read: if isSignedIn() && (
          !('accountId' in get(/databases/$(database)/documents/repositories/$(repoId)).data) ||
          get(/databases/$(database)/documents/repositories/$(repoId)).data.accountId == null ||
          isAccountMember(get(/databases/$(database)/documents/repositories/$(repoId)).data.accountId)
        );
      }
    }

    match /secure_tokens/{tokenId} {
      allow read: if isSignedIn() && (
        request.auth.uid == tokenId || 
        isAccountMember(tokenId)
      );
      allow write: if isSignedIn() && request.auth.uid == tokenId;
    }

    match /profiles/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    match /invitations/{invitationId} {
      allow read: if isSignedIn() && isAccountMember(resource.data.accountId);
      allow create: if isSignedIn() && isAccountAdmin(request.resource.data.accountId);
      allow update: if isSignedIn() && (
        // Allow admins to update invitation status
        isAccountAdmin(resource.data.accountId) ||
        // Allow invited user to accept invitation
        (resource.data.email == request.auth.token.email &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'acceptedAt']))
      );
      allow delete: if isSignedIn() && isAccountAdmin(resource.data.accountId);
    }
  }
}