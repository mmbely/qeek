{
    "files": {
      ".firebaserc": {
        "description": ".firebaserc file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-01-05T21:54:46",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "",
        "size": 102
      },
      ".gitignore": {
        "description": ".gitignore file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-11T23:04:00",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "",
        "size": 1523
      },
      "README.md": {
        "description": "README.md file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2024-10-19T20:51:47",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "md",
        "size": 2117
      },
      "backend/.gitignore": {
        "description": ".gitignore file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-11T23:04:00",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "",
        "size": 25
      },
      "backend/package.json": {
        "description": "package.json file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-16T19:50:50",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "json",
        "size": 571
      },
      "backend/src/index.ts": {
        "description": "This backend service sets up an Express.js server with API routes, integrates with Firebase for authentication and Firestore database interactions, and uses a cloud function to manage user invitations.  It leverages environment variables for configuration.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "express",
          "cors",
          "dotenv",
          "./routes/repository",
          "firebase-functions/v2/https",
          "firebase-admin",
          "nodemailer"
        ],
        "lastAnalyzed": "2025-02-16T19:50:50",
        "functions": [
          {
            "stateInteractions": {
              "reads": [],
              "writes": [
                "invitations collection in Firestore"
              ]
            },
            "purpose": "Handles user invitation requests, creates invitation documents in Firestore, and intends to send an invitation email.",
            "dependencies": [
              "firebase-admin",
              "request.auth",
              "request.data"
            ],
            "name": "sendInvitation",
            "params": [
              "request"
            ],
            "returns": "{ success: boolean, message: string }"
          }
        ],
        "classes": [],
        "imports": [
          "express",
          "cors",
          "dotenv",
          "./routes/repository",
          "firebase-functions/v2/https",
          "firebase-admin",
          "nodemailer"
        ],
        "exports": [
          "sendInvitation"
        ],
        "language": "ts",
        "size": 2062
      },
      "backend/src/routes/repository.ts": {
        "description": "This code defines an Express.js route that triggers a Python script to synchronize a repository. It receives repository, user, and account IDs via a POST request and spawns a child process to execute the Python script. Real-time output and error handling are implemented. The route returns an immediate success response while the sync process runs in the background.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "express",
          "child_process",
          "path"
        ],
        "lastAnalyzed": "2025-02-16T19:50:50",
        "functions": [
          {
            "purpose": "Handles the POST request to '/sync', triggers the repository synchronization process.",
            "params": [
              "req",
              "res"
            ],
            "returns": "A JSON response indicating the sync status.",
            "name": "",
            "stateInteractions": {
              "reads": [
                "req.body"
              ],
              "writes": []
            },
            "dependencies": [
              "spawn",
              "path.resolve"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "express",
          "child_process",
          "path"
        ],
        "exports": [],
        "language": "ts",
        "size": 1492
      },
      "backend/tsconfig.json": {
        "description": "tsconfig.json file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-11T23:04:00",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "json",
        "size": 307
      },
      "code-prompt.py": {
        "description": "This script aggregates the content of all code files in a Git repository into a single output file, excluding files specified in .gitignore and binary files. It specifically targets files with common code extensions like .js, .ts, .html, .css, etc.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "os",
          "fnmatch"
        ],
        "lastAnalyzed": "2024-10-19T20:51:47",
        "functions": [
          {
            "name": "parse_gitignore",
            "dependencies": [
              "os.path.exists",
              "open"
            ],
            "params": [
              "gitignore_path"
            ],
            "returns": "List of strings representing ignore patterns.",
            "purpose": "Reads and parses a .gitignore file, returning a list of ignore patterns.",
            "stateInteractions": {
              "writes": [],
              "reads": [
                "gitignore file"
              ]
            }
          },
          {
            "purpose": "Determines if a given file path should be ignored based on the provided .gitignore patterns.",
            "dependencies": [
              "os.path.relpath",
              "fnmatch.fnmatch"
            ],
            "name": "should_ignore",
            "params": [
              "file_path",
              "ignore_patterns"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "returns": "Boolean indicating whether the file should be ignored."
          },
          {
            "params": [
              "file_path"
            ],
            "name": "is_binary",
            "returns": "Boolean indicating whether the file is likely a binary file.",
            "dependencies": [
              "open"
            ],
            "stateInteractions": {
              "reads": [
                "file content"
              ],
              "writes": []
            },
            "purpose": "Checks if a file is binary by looking for NULL bytes within the first 1024 bytes."
          }
        ],
        "classes": [],
        "imports": [
          "os",
          "fnmatch"
        ],
        "exports": [],
        "language": "py",
        "size": 3847
      },
      "code_prompt.txt": {
        "description": "code_prompt.txt file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-17T08:22:16",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "txt",
        "size": 307150
      },
      "database-debug.log": {
        "description": "database-debug.log file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-01-13T00:01:09",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "log",
        "size": 1999
      },
      "database.rules.json": {
        "description": "database.rules.json file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-08T08:32:28",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "json",
        "size": 766
      },
      "firebase.json": {
        "description": "firebase.json file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-17T20:48:14",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "json",
        "size": 392
      },
      "firestore-debug.log": {
        "description": "firestore-debug.log file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-01-13T00:01:09",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "log",
        "size": 1724
      },
      "firestore.indexes.json": {
        "description": "firestore.indexes.json file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-09T14:16:14",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "json",
        "size": 337
      },
      "firestore.rules": {
        "description": "firestore.rules file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-19T18:46:04",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "rules",
        "size": 4863
      },
      "functions/.eslintrc.js": {
        "description": "ESLint configuration for TypeScript in a Node.js environment. Enforces code style and quality using recommended presets and plugins like Prettier, import, and TypeScript ESLint.",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-15T13:25:30",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "js",
        "size": 685
      },
      "functions/.gitignore": {
        "description": ".gitignore file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-17T20:48:14",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "",
        "size": 45
      },
      "functions/index.js": {
        "description": "This code defines several Firebase Cloud Functions for user management, including creating users, retrieving users by company ID, and retrieving all users. It uses Firebase Admin SDK for database interactions and Firebase Authentication for user authorization. The `api` function provides a basic HTTP endpoint with CORS handling.",
        "features": [
          "function definitions"
        ],
        "dependencies": [],
        "lastAnalyzed": "2025-01-05T21:54:46",
        "functions": [
          {
            "name": "api",
            "params": [
              "request",
              "response"
            ],
            "purpose": "HTTP endpoint for fetching users by company ID, handling CORS.",
            "returns": "void",
            "stateInteractions": {
              "reads": [
                "users"
              ],
              "writes": []
            },
            "dependencies": [
              "firebase-admin",
              "cors"
            ]
          },
          {
            "dependencies": [
              "firebase-admin",
              "firebase-functions"
            ],
            "purpose": "Adds a new user to the database.",
            "name": "addUser",
            "params": [
              "data",
              "context"
            ],
            "returns": "{ success: boolean, message: string, userId: string }",
            "stateInteractions": {
              "reads": [],
              "writes": [
                "users"
              ]
            }
          },
          {
            "purpose": "Retrieves users by company ID.",
            "name": "getUsers",
            "stateInteractions": {
              "writes": [],
              "reads": [
                "users"
              ]
            },
            "returns": "{ [userId]: { name: string, email: string, companyId: string } }",
            "dependencies": [
              "firebase-admin",
              "firebase-functions"
            ],
            "params": [
              "data",
              "context"
            ]
          },
          {
            "purpose": "Retrieves all users from the database.",
            "params": [
              "data",
              "context"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": [
                "users"
              ]
            },
            "returns": "{ [userId]: { name: string, email: string, companyId: string } }",
            "dependencies": [
              "firebase-admin",
              "firebase-functions"
            ],
            "name": "getAllUsers"
          }
        ],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "js",
        "size": 5163
      },
      "functions/package-lock.json": {
        "description": "package-lock.json file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-17T20:48:14",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "json",
        "size": 237171
      },
      "functions/package.json": {
        "description": "package.json file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-18T18:44:59",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "json",
        "size": 1173
      },
      "functions/repository-indexer/.env.example": {
        "description": ".env.example file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-20T20:35:38",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "example",
        "size": 196
      },
      "functions/repository-indexer/.gitignore": {
        "description": ".gitignore file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-20T20:35:38",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "",
        "size": 65
      },
      "functions/repository-indexer/code-prompt.py": {
        "description": "This script aggregates the content of all code files within a repository into a single file (`code_prompt.txt`), excluding files specified in `.gitignore`, binary files, and files without specified code extensions.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "os",
          "fnmatch"
        ],
        "lastAnalyzed": "2025-02-20T20:35:38",
        "functions": [
          {
            "dependencies": [
              "os"
            ],
            "returns": "A list of strings representing ignore patterns.",
            "stateInteractions": {
              "reads": [
                ".gitignore file"
              ],
              "writes": []
            },
            "params": [
              "gitignore_path"
            ],
            "name": "parse_gitignore",
            "purpose": "Parses the .gitignore file and returns a list of ignore patterns."
          },
          {
            "params": [
              "file_path",
              "ignore_patterns"
            ],
            "dependencies": [
              "os",
              "fnmatch"
            ],
            "returns": "True if the file should be ignored, False otherwise.",
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "name": "should_ignore",
            "purpose": "Checks if a file should be ignored based on .gitignore patterns."
          },
          {
            "params": [
              "file_path"
            ],
            "returns": "True if the file appears to be binary, False otherwise.",
            "purpose": "Checks if a file is a binary file by searching for NULL bytes within the first 1024 bytes.",
            "dependencies": [],
            "stateInteractions": {
              "writes": [],
              "reads": [
                "given file"
              ]
            },
            "name": "is_binary"
          }
        ],
        "classes": [],
        "imports": [
          "os",
          "fnmatch"
        ],
        "exports": [],
        "language": "py",
        "size": 3846
      },
      "functions/repository-indexer/pytest.ini": {
        "description": "pytest.ini file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-20T20:35:38",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "ini",
        "size": 257
      },
      "functions/repository-indexer/requirements.txt": {
        "description": "requirements.txt file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-20T20:35:38",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "txt",
        "size": 1069
      },
      "functions/repository-indexer/src/__init__.py": {
        "description": "This code implements a Cloud Function to index repository metadata into Elasticsearch. It retrieves repository information from GitHub, transforms it, and indexes it into an Elasticsearch index. The function is triggered by Pub/Sub messages and uses the GitHub API and the Elasticsearch client library.",
        "features": [
          "function definitions"
        ],
        "dependencies": [],
        "lastAnalyzed": "2025-02-17T20:48:14",
        "functions": [
          {
            "params": [
              "data"
            ],
            "purpose": "Handles incoming Pub/Sub messages, retrieves repository information, and indexes it into Elasticsearch.",
            "dependencies": [
              "elasticsearch",
              "github",
              "os.environ"
            ],
            "returns": "None",
            "stateInteractions": {
              "writes": [
                "Elasticsearch index"
              ],
              "reads": [
                "os.environ (for configuration)",
                "Pub/Sub message data"
              ]
            },
            "name": "repository_indexer"
          }
        ],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "py",
        "size": 0
      },
      "functions/repository-indexer/src/cleanup.py": {
        "description": "This script cleans up Firestore data associated with a specific GitHub repository. It deletes all documents within the 'files' subcollection of a given repository document in the 'repositories' collection.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "firebase_admin",
          "firebase_admin",
          "pathlib"
        ],
        "lastAnalyzed": "2025-02-18T19:51:31",
        "functions": [
          {
            "params": [
              "repo_name (str)"
            ],
            "dependencies": [
              "firebase-admin",
              "firestore",
              "pathlib"
            ],
            "purpose": "Deletes all documents in the 'files' subcollection of a specified repository in Firestore.",
            "returns": "None",
            "stateInteractions": {
              "reads": [
                "repository document",
                "files subcollection"
              ],
              "writes": [
                "Deletes documents in files subcollection"
              ]
            },
            "name": "cleanup_repository"
          }
        ],
        "classes": [],
        "imports": [
          "firebase_admin",
          "firebase_admin",
          "pathlib"
        ],
        "exports": [],
        "language": "py",
        "size": 1199
      },
      "functions/repository-indexer/src/cli.py": {
        "description": "A command-line interface (CLI) for indexing GitHub repositories. It takes a repository name, account ID, and optional arguments like environment file, test mode, skipped file types, and maximum files. It uses Firebase for data storage and the `process_repository` function from `main.py` to handle the indexing process.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "argparse",
          "asyncio",
          "firebase_admin",
          "firebase_admin",
          "pathlib",
          "main",
          "config",
          "services.github_service"
        ],
        "lastAnalyzed": "2025-02-20T22:28:39",
        "functions": [
          {
            "stateInteractions": {
              "writes": [
                "Firebase"
              ],
              "reads": [
                "command-line arguments",
                "environment file",
                "firebase-credentials.json"
              ]
            },
            "returns": "None",
            "purpose": "Entry point of the CLI. Parses arguments, loads configuration, initializes Firebase, and calls `process_repository`.",
            "name": "main",
            "dependencies": [
              "argparse",
              "config",
              "firebase_admin",
              "main",
              "pathlib"
            ],
            "params": []
          }
        ],
        "classes": [],
        "imports": [
          "argparse",
          "asyncio",
          "firebase_admin",
          "firebase_admin",
          "pathlib",
          "main",
          "config",
          "services.github_service"
        ],
        "exports": [],
        "language": "py",
        "size": 1960
      },
      "functions/repository-indexer/src/config.py": {
        "description": "Loads configuration based on the execution environment (Cloud Functions vs. local). Uses environment variables or a .env file for local development and predefined values for Cloud Functions. Handles Firebase credentials differently depending on the environment.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "os",
          "dotenv",
          "pathlib"
        ],
        "lastAnalyzed": "2025-02-20T20:35:38",
        "functions": [
          {
            "stateInteractions": {
              "writes": [],
              "reads": [
                "FUNCTION_TARGET",
                "GEMINI_API_KEY",
                "REACT_APP_FIREBASE_PROJECT_ID",
                "ENVIRONMENT"
              ]
            },
            "name": "load_config",
            "purpose": "Loads configuration values from environment variables or a .env file depending on the environment.",
            "returns": "A dictionary containing configuration parameters.",
            "dependencies": [
              "os",
              "dotenv",
              "pathlib"
            ],
            "params": [
              "env_path=None"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "os",
          "dotenv",
          "pathlib"
        ],
        "exports": [],
        "language": "py",
        "size": 1631
      },
      "functions/repository-indexer/src/firestore_service.py": {
        "description": "Provides an interface to interact with Firestore for storing repository metadata and file information. Uses batch operations for efficient writes.",
        "features": [
          "external dependencies",
          "function definitions",
          "class definitions"
        ],
        "dependencies": [
          "firebase_admin",
          "datetime",
          "typing"
        ],
        "lastAnalyzed": "2025-02-17T20:48:14",
        "functions": [
          {
            "returns": "None",
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "name": "__init__",
            "dependencies": [
              "firebase_admin"
            ],
            "purpose": "Initializes the Firestore client with project ID and application default credentials.",
            "params": [
              "project_id: str"
            ]
          },
          {
            "dependencies": [
              "firestore"
            ],
            "stateInteractions": {
              "reads": [],
              "writes": [
                "repositories collection"
              ]
            },
            "name": "store_repository_metadata",
            "purpose": "Stores or updates repository metadata in Firestore.",
            "params": [
              "repo_id: str",
              "metadata: Dict"
            ],
            "returns": "None"
          },
          {
            "returns": "None",
            "name": "store_repository_files",
            "params": [
              "repo_id: str",
              "files: List[Dict]"
            ],
            "purpose": "Stores repository file metadata in Firestore using batch operations.",
            "stateInteractions": {
              "reads": [],
              "writes": [
                "repositories collection",
                "files subcollection"
              ]
            },
            "dependencies": [
              "firestore",
              "datetime"
            ]
          },
          {
            "purpose": "Updates the synchronization status of a repository in Firestore.",
            "dependencies": [
              "firestore",
              "datetime"
            ],
            "name": "update_sync_status",
            "params": [
              "repo_id: str",
              "status: str",
              "error: str = None"
            ],
            "stateInteractions": {
              "writes": [
                "repositories collection"
              ],
              "reads": []
            },
            "returns": "None"
          }
        ],
        "classes": [
          {
            "dependencies": [
              "firebase_admin"
            ],
            "methods": [
              "__init__",
              "store_repository_metadata",
              "store_repository_files",
              "update_sync_status"
            ],
            "properties": [
              "db"
            ],
            "name": "FirestoreService",
            "purpose": "Provides methods to interact with Firestore for repository and file data management."
          }
        ],
        "imports": [
          "firebase_admin",
          "datetime",
          "typing"
        ],
        "exports": [],
        "language": "py",
        "size": 2774
      },
      "functions/repository-indexer/src/github_service.py": {
        "description": "Provides an interface to interact with the GitHub API, primarily to fetch repository files and metadata. It authenticates using a GitHub personal access token stored in Firebase.",
        "features": [
          "external dependencies",
          "function definitions",
          "class definitions"
        ],
        "dependencies": [
          "github",
          "typing",
          "firebase_admin"
        ],
        "lastAnalyzed": "2025-02-18T18:44:59",
        "functions": [
          {
            "returns": "GitHubService instance",
            "params": [
              "account_id (str)"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": [
                "GitHub token from Firebase"
              ]
            },
            "dependencies": [
              "Firebase Firestore"
            ],
            "purpose": "Factory method to create a GitHubService instance using a given account ID. Retrieves the GitHub token from Firebase associated with the account.",
            "name": "create_from_account_id"
          },
          {
            "returns": "GitHubService instance",
            "dependencies": [],
            "name": "create_for_testing",
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "params": [
              "token (str)"
            ],
            "purpose": "Factory method to create a GitHubService instance for testing purposes, directly using the provided token."
          },
          {
            "name": "get_repository_files",
            "purpose": "Fetches all files from a given GitHub repository, including their metadata like name, path, size, and last updated date.",
            "params": [
              "repo_full_name (str)"
            ],
            "returns": "List of file metadata dictionaries",
            "dependencies": [
              "PyGitHub"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": [
                "Repository files from GitHub"
              ]
            }
          },
          {
            "name": "get_repository_metadata",
            "stateInteractions": {
              "writes": [],
              "reads": [
                "Repository metadata from GitHub"
              ]
            },
            "purpose": "Retrieves basic metadata about a GitHub repository, including name, description, language, and statistics like stars and forks.",
            "params": [
              "repo_full_name (str)"
            ],
            "returns": "Dictionary containing repository metadata",
            "dependencies": [
              "PyGitHub"
            ]
          }
        ],
        "classes": [
          {
            "purpose": "Provides an interface for interacting with the GitHub API.",
            "methods": [
              "create_from_account_id",
              "create_for_testing",
              "get_repository_files",
              "get_repository_metadata"
            ],
            "dependencies": [
              "github",
              "firebase_admin"
            ],
            "properties": [
              "github"
            ],
            "name": "GitHubService"
          }
        ],
        "imports": [
          "github",
          "typing",
          "firebase_admin"
        ],
        "exports": [],
        "language": "py",
        "size": 3174
      },
      "functions/repository-indexer/src/main.py": {
        "description": "This script processes a given GitHub repository, analyzes each relevant file using the Gemini API, and stores the results in Firestore. It includes features for progress tracking, error handling, and rate limiting. Designed for both development and production (Cloud Functions) environments.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "json",
          "asyncio",
          "typing",
          "pathlib",
          "datetime",
          "time",
          "tqdm",
          "firebase_admin",
          "firebase_admin",
          "services.github_service",
          "services.firestore_service",
          "services.gemini_service",
          "os",
          "dotenv",
          "dotenv",
          "pathlib"
        ],
        "lastAnalyzed": "2025-02-20T22:28:39",
        "functions": [
          {
            "dependencies": [
              "GitHubService",
              "GeminiService"
            ],
            "stateInteractions": {
              "writes": [
                "file_info"
              ],
              "reads": [
                "file_info"
              ]
            },
            "params": [
              "github_service",
              "gemini_service",
              "repo_full_name",
              "file_info"
            ],
            "purpose": "Processes a single file from the repository, retrieves its content from GitHub, analyzes it using the Gemini API, and adds the analysis results to the file metadata. Includes retry logic with exponential backoff.",
            "returns": "A dictionary containing the updated file information with analysis results.",
            "name": "process_file"
          },
          {
            "params": [
              "file_path"
            ],
            "dependencies": [],
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "name": "should_analyze_file",
            "purpose": "Determines whether a file should be analyzed based on its path and extension.",
            "returns": "A boolean indicating whether the file should be analyzed."
          },
          {
            "name": "process_repository",
            "purpose": "Orchestrates the processing of an entire repository. Fetches repository metadata and files, processes each file, tracks progress, and stores the results in Firestore. Handles errors and updates sync status.",
            "params": [
              "repo_full_name",
              "user_id",
              "account_id",
              "config"
            ],
            "stateInteractions": {
              "reads": [
                "config"
              ],
              "writes": [
                "Firestore database"
              ]
            },
            "dependencies": [
              "GitHubService",
              "FirestoreService",
              "GeminiService"
            ],
            "returns": "A dictionary containing the status ('success' or 'error'), repository metadata, and file count."
          },
          {
            "name": "init_firestore_dev",
            "purpose": "Initializes Firebase Admin SDK with credentials from a local file for development.",
            "params": [
              "config"
            ],
            "returns": "FirestoreService instance",
            "dependencies": [
              "firebase_admin"
            ],
            "stateInteractions": {
              "reads": [
                "config"
              ],
              "writes": []
            }
          },
          {
            "name": "init_firestore_prod",
            "purpose": "Initializes Firebase Admin SDK using Application Default Credentials in production.",
            "dependencies": [
              "firebase_admin"
            ],
            "params": [
              "config"
            ],
            "returns": "FirestoreService instance",
            "stateInteractions": {
              "reads": [
                "config"
              ],
              "writes": []
            }
          },
          {
            "dependencies": [
              "firebase_admin"
            ],
            "purpose": "Retrieves GitHub token from firestore.",
            "name": "get_github_token_from_firebase",
            "returns": "GitHub token",
            "params": [
              "account_id"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": [
                "Firestore database"
              ]
            }
          },
          {
            "dependencies": [
              "python-dotenv"
            ],
            "name": "load_env",
            "returns": "None",
            "purpose": "Loads environment variables from root .env file",
            "params": [],
            "stateInteractions": {
              "writes": [],
              "reads": [
                ".env file"
              ]
            }
          },
          {
            "purpose": "Retrieves secret from environment variables",
            "stateInteractions": {
              "writes": [],
              "reads": [
                "Environment variables"
              ]
            },
            "returns": "Secret value",
            "name": "get_secret",
            "params": [
              "secret_id"
            ],
            "dependencies": [
              "os"
            ]
          },
          {
            "name": "cloud_function_handler",
            "params": [
              "repo_full_name",
              "user_id",
              "account_id"
            ],
            "purpose": "Entry point for Cloud Function. Initializes the process and calls process_repository.",
            "stateInteractions": {
              "reads": [
                "Environment variables"
              ],
              "writes": []
            },
            "returns": "Result of process_repository",
            "dependencies": [
              "process_repository",
              "get_secret"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "json",
          "asyncio",
          "typing",
          "pathlib",
          "datetime",
          "time",
          "tqdm",
          "firebase_admin",
          "firebase_admin",
          "services.github_service",
          "services.firestore_service",
          "services.gemini_service",
          "os",
          "dotenv",
          "dotenv",
          "pathlib"
        ],
        "exports": [],
        "language": "py",
        "size": 9271
      },
      "functions/repository-indexer/src/services/api.ts": {
        "description": "Provides API interaction functions for syncing a repository.  Relies on an environment variable or defaults to a local API URL.  Uses fetch for API requests.",
        "features": [
          "function definitions",
          "exports"
        ],
        "dependencies": [],
        "lastAnalyzed": "2025-02-17T20:48:14",
        "functions": [
          {
            "name": "syncRepository",
            "purpose": "Sends a POST request to the API to initiate repository synchronization.",
            "params": [
              "repositoryName (string)",
              "userId (string)"
            ],
            "returns": "A promise that resolves to the JSON response from the API.",
            "dependencies": [
              "API_BASE_URL (environment variable or default)",
              "fetch"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": []
            }
          }
        ],
        "classes": [],
        "imports": [],
        "exports": [
          "syncRepository"
        ],
        "language": "ts",
        "size": 491
      },
      "functions/repository-indexer/src/services/firestore_service.py": {
        "description": "This code provides a service for interacting with Firestore to manage repository metadata and file information. It supports storing, updating, and tracking changes to repository files, including metrics and status tracking.",
        "features": [
          "external dependencies",
          "function definitions",
          "class definitions"
        ],
        "dependencies": [
          "firebase_admin",
          "datetime",
          "typing"
        ],
        "lastAnalyzed": "2025-02-20T22:28:39",
        "functions": [
          {
            "name": "__init__",
            "dependencies": [
              "firestore"
            ],
            "returns": "None",
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "params": [
              "project_id: str"
            ],
            "purpose": "Initializes the FirestoreService with a project ID."
          },
          {
            "name": "store_repository_metadata",
            "purpose": "Stores or updates metadata for a given repository.",
            "stateInteractions": {
              "writes": [
                "repositories collection"
              ],
              "reads": [
                "repositories collection"
              ]
            },
            "dependencies": [
              "firestore"
            ],
            "returns": "firestore.DocumentReference",
            "params": [
              "repo_id: str",
              "metadata: Dict"
            ]
          },
          {
            "purpose": "Stores and manages file metadata within a repository, tracking changes, deletions, and restorations.",
            "params": [
              "repo_ref: firestore.DocumentReference",
              "files: List[Dict]"
            ],
            "dependencies": [
              "firestore"
            ],
            "stateInteractions": {
              "writes": [
                "repositories collection",
                "files subcollection",
                "metrics subcollection"
              ],
              "reads": [
                "repositories collection",
                "files subcollection"
              ]
            },
            "name": "store_repository_files",
            "returns": "None"
          },
          {
            "returns": "None",
            "dependencies": [
              "firestore"
            ],
            "stateInteractions": {
              "writes": [
                "repositories collection"
              ],
              "reads": []
            },
            "params": [
              "repo_ref: firestore.DocumentReference",
              "status: str",
              "error: str = None",
              "progress: dict = None"
            ],
            "name": "update_sync_status",
            "purpose": "Updates the synchronization status of a repository, including progress and error information."
          }
        ],
        "classes": [
          {
            "dependencies": [
              "firestore"
            ],
            "methods": [
              "__init__",
              "store_repository_metadata",
              "store_repository_files",
              "update_sync_status"
            ],
            "properties": [
              "db"
            ],
            "name": "FirestoreService",
            "purpose": "Provides methods for interacting with Firestore to manage repository and file data."
          }
        ],
        "imports": [
          "firebase_admin",
          "datetime",
          "typing"
        ],
        "exports": [],
        "language": "py",
        "size": 7559
      },
      "functions/repository-indexer/src/services/gemini_service.py": {
        "description": "The `GeminiService` class provides an interface to Google's Gemini API for code analysis. It constructs prompts for the Gemini model based on provided code and file paths, sends the prompt to the Gemini API, and processes the JSON response containing code analysis.",
        "features": [
          "external dependencies",
          "function definitions",
          "class definitions"
        ],
        "dependencies": [
          "google.generativeai",
          "datetime",
          "typing",
          "asyncio",
          "path",
          "json"
        ],
        "lastAnalyzed": "2025-02-20T22:28:39",
        "functions": [
          {
            "returns": "None",
            "purpose": "Initializes the `GeminiService` with a Gemini API key, configures the `genai` library, and tests the connection by generating a simple text.",
            "dependencies": [
              "google.generativeai"
            ],
            "name": "__init__",
            "stateInteractions": {
              "writes": [
                "self.model"
              ],
              "reads": []
            },
            "params": [
              "api_key: str"
            ]
          },
          {
            "params": [
              "file_path: str",
              "content: str"
            ],
            "dependencies": [],
            "returns": "str",
            "purpose": "Creates a formatted prompt string for the Gemini API based on the provided file path and code content.",
            "name": "create_analysis_prompt",
            "stateInteractions": {
              "writes": [],
              "reads": []
            }
          },
          {
            "dependencies": [
              "google.generativeai",
              "asyncio",
              "json",
              "datetime"
            ],
            "name": "generate_file_summary",
            "stateInteractions": {
              "reads": [
                "self.model"
              ],
              "writes": []
            },
            "returns": "Dict",
            "purpose": "Sends the analysis prompt to the Gemini API, processes the JSON response, and adds timestamps and model version information.",
            "params": [
              "content: str",
              "file_path: str"
            ]
          }
        ],
        "classes": [
          {
            "name": "GeminiService",
            "properties": [
              "model"
            ],
            "methods": [
              "__init__",
              "create_analysis_prompt",
              "generate_file_summary"
            ],
            "dependencies": [
              "google.generativeai"
            ],
            "purpose": "Provides an interface to the Google Gemini API for code analysis."
          }
        ],
        "imports": [
          "google.generativeai",
          "datetime",
          "typing",
          "asyncio",
          "path",
          "json"
        ],
        "exports": [],
        "language": "py",
        "size": 6096
      },
      "functions/repository-indexer/src/services/github_service.py": {
        "description": "Provides methods for interacting with the GitHub API, including authentication, repository file retrieval, metadata extraction, and file content retrieval. It uses the `github` library for API interaction and `firebase_admin` for secure token storage. Supports basic code metadata extraction for Python, TypeScript, and JavaScript files.",
        "features": [
          "external dependencies",
          "function definitions",
          "class definitions"
        ],
        "dependencies": [
          "github",
          "typing",
          "firebase_admin",
          "datetime",
          "re",
          "pathlib"
        ],
        "lastAnalyzed": "2025-02-18T19:51:31",
        "functions": [
          {
            "params": [
              "account_id"
            ],
            "name": "create_from_account_id",
            "stateInteractions": {
              "reads": [
                "secure_tokens collection in Firestore"
              ],
              "writes": []
            },
            "dependencies": [
              "firestore"
            ],
            "purpose": "Factory method to create a GitHubService instance using an account ID. Retrieves the GitHub token from Firebase Firestore.",
            "returns": "GitHubService instance"
          },
          {
            "stateInteractions": {
              "writes": [
                "self.github"
              ],
              "reads": []
            },
            "params": [
              "token"
            ],
            "returns": "None",
            "purpose": "Initializes the GitHubService with a GitHub token and authenticates with the GitHub API.",
            "dependencies": [
              "github"
            ],
            "name": "__init__"
          },
          {
            "purpose": "Extracts code metadata (imports, functions, classes, exports) from a given code string based on the file extension.",
            "returns": "Dict containing extracted metadata",
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "params": [
              "content",
              "file_extension"
            ],
            "dependencies": [
              "re"
            ],
            "name": "extract_code_metadata"
          },
          {
            "params": [
              "repo_full_name"
            ],
            "purpose": "Retrieves all files from a given GitHub repository, including code metadata if the file is a supported type.",
            "returns": "List of dictionaries, each representing a file with metadata.",
            "name": "get_repository_files",
            "dependencies": [
              "github",
              "extract_code_metadata"
            ],
            "stateInteractions": {
              "reads": [
                "GitHub repository contents"
              ],
              "writes": []
            }
          },
          {
            "name": "get_repository_metadata",
            "returns": "Dict containing repository metadata.",
            "params": [
              "repo_full_name"
            ],
            "purpose": "Retrieves basic metadata about a GitHub repository.",
            "stateInteractions": {
              "writes": [],
              "reads": [
                "GitHub repository"
              ]
            },
            "dependencies": [
              "github"
            ]
          },
          {
            "dependencies": [
              "github"
            ],
            "params": [
              "repo_full_name",
              "file_path"
            ],
            "name": "get_file_content",
            "returns": "str representing file content",
            "stateInteractions": {
              "reads": [
                "GitHub file content"
              ],
              "writes": []
            },
            "purpose": "Retrieves the content of a specific file in a given repository."
          }
        ],
        "classes": [
          {
            "name": "GitHubService",
            "methods": [
              "create_from_account_id",
              "__init__",
              "extract_code_metadata",
              "get_repository_files",
              "get_repository_metadata",
              "get_file_content"
            ],
            "dependencies": [
              "github",
              "firebase_admin"
            ],
            "properties": [
              "github"
            ],
            "purpose": "Encapsulates the GitHub API interaction logic."
          }
        ],
        "imports": [
          "github",
          "typing",
          "firebase_admin",
          "datetime",
          "re",
          "pathlib"
        ],
        "exports": [],
        "language": "py",
        "size": 8043
      },
      "functions/repository-indexer/src/test_paths.py": {
        "description": "This script verifies the existence of critical paths, such as the root .env file and Firebase credentials, relative to the script's location. It helps confirm the proper project structure and dependency availability during development and testing.",
        "features": [
          "external dependencies"
        ],
        "dependencies": [
          "pathlib",
          "os"
        ],
        "lastAnalyzed": "2025-02-18T18:44:59",
        "functions": [],
        "classes": [],
        "imports": [
          "pathlib",
          "os"
        ],
        "exports": [],
        "language": "py",
        "size": 663
      },
      "functions/repository-indexer/tests/__init__.py": {
        "description": "This directory contains test modules for the repository-indexer function.",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-20T20:35:38",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "py",
        "size": 0
      },
      "functions/repository-indexer/tests/test_gemini_service.py": {
        "description": "This test suite verifies the functionality of the GeminiService for generating AI-powered code analysis. It tests prompt creation, summary generation for various file types (Python, TypeScript, React, JavaScript), handling of different programming languages and frameworks, and processing of simple and complex code structures.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "pytest",
          "src.services.gemini_service",
          "os",
          "dotenv",
          "pathlib",
          "React",
          "is",
          "axios"
        ],
        "lastAnalyzed": "2025-02-20T20:35:38",
        "functions": [
          {
            "dependencies": [
              "GeminiService",
              "os",
              "dotenv",
              "pathlib"
            ],
            "purpose": "Fixture to create a GeminiService instance",
            "returns": "GeminiService instance",
            "params": [],
            "stateInteractions": {
              "reads": [
                ".env.test file"
              ],
              "writes": []
            },
            "name": "gemini_service"
          },
          {
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "params": [
              "gemini_service"
            ],
            "returns": "None",
            "purpose": "Tests prompt creation",
            "dependencies": [
              "gemini_service"
            ],
            "name": "test_create_analysis_prompt"
          },
          {
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "returns": "None",
            "dependencies": [
              "gemini_service"
            ],
            "purpose": "Tests Python file analysis",
            "params": [
              "gemini_service"
            ],
            "name": "test_generate_file_summary_python"
          },
          {
            "returns": "None",
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "name": "test_generate_file_summary_typescript",
            "purpose": "Tests TypeScript file analysis",
            "params": [
              "gemini_service"
            ],
            "dependencies": [
              "gemini_service"
            ]
          },
          {
            "name": "test_generate_file_summary_react_component",
            "dependencies": [
              "gemini_service"
            ],
            "purpose": "Tests React component analysis",
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "returns": "None",
            "params": [
              "gemini_service"
            ]
          },
          {
            "purpose": "Tests JavaScript file analysis",
            "params": [
              "gemini_service"
            ],
            "returns": "None",
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "name": "test_generate_file_summary_javascript",
            "dependencies": [
              "gemini_service"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "pytest",
          "src.services.gemini_service",
          "os",
          "dotenv",
          "pathlib",
          "React",
          "is",
          "axios"
        ],
        "exports": [],
        "language": "py",
        "size": 6778
      },
      "functions/repository-indexer/tests/test_github_service.py": {
        "description": "Tests the GitHubService class, specifically the get_repository_metadata method, using a test configuration and pytest.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "pytest",
          "src.services.github_service",
          "src.config"
        ],
        "lastAnalyzed": "2025-02-18T18:44:59",
        "functions": [
          {
            "name": "github_service",
            "returns": "GitHubService instance",
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "purpose": "Pytest fixture to create a GitHubService instance with a test configuration.",
            "dependencies": [
              "load_config",
              "GitHubService"
            ],
            "params": []
          },
          {
            "returns": "None",
            "name": "test_get_repository_metadata",
            "purpose": "Tests the get_repository_metadata method of GitHubService.",
            "params": [
              "github_service"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "dependencies": [
              "github_service.get_repository_metadata"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "pytest",
          "src.services.github_service",
          "src.config"
        ],
        "exports": [],
        "language": "py",
        "size": 461
      },
      "functions/requirements.txt": {
        "description": "requirements.txt file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-17T20:48:14",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "txt",
        "size": 58
      },
      "functions/setup_repo_indexer.sh": {
        "description": "setup_repo_indexer.sh file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-18T18:44:59",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "sh",
        "size": 10031
      },
      "functions/src/index.ts": {
        "description": "This Cloud Function code defines several HTTPS callable functions for managing GitHub repository synchronization, user invitations (currently placeholder), and storing GitHub tokens securely. It uses Firebase Admin SDK for database interactions, Octokit for GitHub API calls, and a Python script for repository indexing.  The `syncGithubRepository` function is the core function, orchestrating the repository sync process by executing a Python script.  Error handling and logging are implemented throughout.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "firebase-functions/v2/https",
          "firebase-admin",
          "@octokit/rest",
          "firebase-functions",
          "child_process",
          "@octokit/rest/dist-types/index"
        ],
        "lastAnalyzed": "2025-02-18T18:44:59",
        "functions": [
          {
            "purpose": "Placeholder for sending user invitations. Currently logs the request data and returns a success message without actually sending invitations.",
            "returns": "{ success: boolean, message: string, receivedData: object }",
            "name": "sendInvitation",
            "params": [
              "request"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "dependencies": []
          },
          {
            "params": [
              "request"
            ],
            "stateInteractions": {
              "writes": [
                "secure_tokens collection in Firestore"
              ],
              "reads": []
            },
            "name": "storeGithubToken",
            "purpose": "Stores a GitHub token securely in Firestore after validating it against the GitHub API.",
            "dependencies": [
              "Octokit",
              "firebase-admin"
            ],
            "returns": "{ success: boolean }"
          },
          {
            "purpose": "Synchronizes a GitHub repository by executing a Python script. It retrieves the user's ID, repository name, and account ID from the request and passes them as arguments to the script.",
            "dependencies": [
              "child_process.spawn",
              "path"
            ],
            "params": [
              "request"
            ],
            "name": "syncGithubRepository",
            "returns": "Promise<object> - The result of the Python script execution, parsed as JSON.",
            "stateInteractions": {
              "writes": [],
              "reads": []
            }
          },
          {
            "dependencies": [
              "Octokit",
              "admin.firestore.Timestamp"
            ],
            "name": "processFiles",
            "returns": "Promise<GitHubFile[]>",
            "purpose": "A recursive helper function that fetches and processes files from a GitHub repository using the Octokit library.  It handles both files and directories, recursively fetching content from directories. It adds a timestamp to each processed file.",
            "params": [
              "files",
              "octokit",
              "owner",
              "repo",
              "path"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": []
            }
          }
        ],
        "classes": [],
        "imports": [
          "firebase-functions/v2/https",
          "firebase-admin",
          "@octokit/rest",
          "firebase-functions",
          "child_process",
          "@octokit/rest/dist-types/index"
        ],
        "exports": [
          "addUser",
          "getUsers",
          "getAllUsers",
          "api",
          "sendInvitation",
          "storeGithubToken",
          "syncGithubRepository"
        ],
        "language": "ts",
        "size": 6653
      },
      "functions/src/services/gemini.ts": {
        "description": "Provides a function to generate code summaries using Google's Gemini API.",
        "features": [
          "function definitions"
        ],
        "dependencies": [],
        "lastAnalyzed": "2025-02-20T20:35:38",
        "functions": [
          {
            "name": "generateAISummary",
            "purpose": "Sends a request to the Gemini API to generate a summary of a given code file.",
            "stateInteractions": {
              "reads": [
                "process.env.REACT_APP_GEMINI_API_KEY",
                "content",
                "filePath",
                "customPrompt"
              ],
              "writes": []
            },
            "dependencies": [
              "Gemini API",
              "process.env.REACT_APP_GEMINI_API_KEY"
            ],
            "params": [
              "content: string",
              "filePath: string",
              "customPrompt?: string"
            ],
            "returns": "A Promise resolving to a GeminiResponse object containing the API's response."
          }
        ],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "ts",
        "size": 1154
      },
      "functions/tsconfig.json": {
        "description": "tsconfig.json file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-16T19:50:50",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "json",
        "size": 511
      },
      "package-lock.json": {
        "description": "package-lock.json file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-20T20:35:38",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "json",
        "size": 985645
      },
      "package.json": {
        "description": "package.json file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-20T20:35:38",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "json",
        "size": 2475
      },
      "postcss.config.js": {
        "description": "This configuration file sets up PostCSS to use the Tailwind CSS framework and Autoprefixer for adding vendor prefixes.",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2024-10-19T20:51:47",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "js",
        "size": 82
      },
      "public/favicon.ico": {
        "description": "favicon.ico file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-10T23:35:15",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "ico",
        "size": 8020
      },
      "public/index.html": {
        "description": "index.html file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2024-10-19T20:51:47",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "html",
        "size": 1721
      },
      "public/logo192.png": {
        "description": "logo192.png file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2024-10-19T20:51:47",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "png",
        "size": 5347
      },
      "public/logo512.png": {
        "description": "logo512.png file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2024-10-19T20:51:47",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "png",
        "size": 9664
      },
      "public/manifest.json": {
        "description": "manifest.json file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2024-10-19T20:51:47",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "json",
        "size": 492
      },
      "public/qeek-logo.png": {
        "description": "qeek-logo.png file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2024-10-19T20:51:47",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "png",
        "size": 30038
      },
      "public/robots.txt": {
        "description": "robots.txt file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2024-10-19T20:51:47",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "txt",
        "size": 67
      },
      "pubsub-debug.log": {
        "description": "pubsub-debug.log file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-01-05T21:54:46",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "log",
        "size": 651
      },
      "src/App.css": {
        "description": "App.css file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2024-10-19T20:51:47",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "css",
        "size": 564
      },
      "src/App.test.tsx": {
        "description": "This code defines a simple test for the App component, checking if it renders a link containing the text 'learn react'. It utilizes the React Testing Library.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "react",
          "@testing-library/react",
          "./App"
        ],
        "lastAnalyzed": "2024-10-19T20:51:47",
        "functions": [
          {
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "purpose": "Tests if the App component renders a link containing 'learn react'.",
            "params": [
              "'renders learn react link'",
              "() => {...}"
            ],
            "returns": "void",
            "name": "test",
            "dependencies": [
              "render",
              "screen.getByText",
              "expect",
              "App"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "react",
          "@testing-library/react",
          "./App"
        ],
        "exports": [],
        "language": "tsx",
        "size": 273
      },
      "src/App.tsx": {
        "description": "This React application provides a platform for team collaboration, featuring chat, ticket management, codebase integration, and user settings. It uses React Router for navigation, context providers for state management, and integrates with GitHub.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "react-router-dom",
          "./context/AuthContext",
          "./pages/LoginPage",
          "./pages/RegisterPage",
          "./components/Chat/ChatInterface",
          "./components/Tickets/TicketList",
          "./components/Tickets/TicketBoard",
          "./components/Layout",
          "./components/Tickets",
          "./components/Settings/GitHubSettings",
          "lucide-react",
          "./components/Codebase/CodebaseViewer",
          "./context/CodebaseContext",
          "./context/AccountContext",
          "./components/Settings/SettingsLayout",
          "./components/Settings/UserManagement",
          "./components/Settings/UserProfile",
          "./components/Settings/AdminSettings",
          "./components/Codebase/FileExtractionTool"
        ],
        "lastAnalyzed": "2025-02-20T20:35:38",
        "functions": [
          {
            "returns": "JSX.Element or Navigate component",
            "params": [
              "{ children }"
            ],
            "name": "ProtectedRoute",
            "dependencies": [
              "useAuth"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": [
                "user (from AuthContext)"
              ]
            },
            "purpose": "Guards routes that require authentication."
          },
          {
            "params": [],
            "name": "usePageTitle",
            "returns": "string (page title)",
            "dependencies": [
              "useLocation"
            ],
            "purpose": "Determines the title of the page based on route.",
            "stateInteractions": {
              "reads": [
                "location.pathname"
              ],
              "writes": []
            }
          },
          {
            "returns": "JSX.Element",
            "stateInteractions": {
              "writes": [
                "document.title"
              ],
              "reads": [
                "pageTitle"
              ]
            },
            "dependencies": [
              "usePageTitle",
              "Routes",
              "Route",
              "Navigate",
              "ProtectedRoute",
              "Layout",
              "ChatInterface",
              "TicketList",
              "TicketBoard",
              "TicketForm",
              "GitHubSettings",
              "CodebaseViewer",
              "FileExtractionTool",
              "SettingsLayout",
              "UserProfile",
              "UserManagement",
              "AdminSettings"
            ],
            "name": "AppContent",
            "params": [],
            "purpose": "Renders the main application content based on routes."
          },
          {
            "purpose": "Main application component, wraps app content with Context Providers and Router.",
            "returns": "JSX.Element",
            "params": [],
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "dependencies": [
              "AuthProvider",
              "AccountProvider",
              "CodebaseProvider",
              "Router",
              "AppContent"
            ],
            "name": "App"
          }
        ],
        "classes": [],
        "imports": [
          "react-router-dom",
          "./context/AuthContext",
          "./pages/LoginPage",
          "./pages/RegisterPage",
          "./components/Chat/ChatInterface",
          "./components/Tickets/TicketList",
          "./components/Tickets/TicketBoard",
          "./components/Layout",
          "./components/Tickets",
          "./components/Settings/GitHubSettings",
          "lucide-react",
          "./components/Codebase/CodebaseViewer",
          "./context/CodebaseContext",
          "./context/AccountContext",
          "./components/Settings/SettingsLayout",
          "./components/Settings/UserManagement",
          "./components/Settings/UserProfile",
          "./components/Settings/AdminSettings",
          "./components/Codebase/FileExtractionTool"
        ],
        "exports": [],
        "language": "tsx",
        "size": 4336
      },
      "src/components/Auth/Login.tsx": {
        "description": "Login component allowing users to authenticate via email/password or Google.  Uses AuthContext for authentication logic and React Router for navigation.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "../../context/AuthContext",
          "react-router-dom",
          "lucide-react"
        ],
        "lastAnalyzed": "2024-10-19T20:51:47",
        "functions": [
          {
            "params": [
              "e: React.FormEvent"
            ],
            "name": "handleSubmit",
            "dependencies": [
              "email",
              "password",
              "login",
              "setError",
              "onSuccess"
            ],
            "stateInteractions": {
              "writes": [
                "error"
              ],
              "reads": [
                "email",
                "password",
                "error"
              ]
            },
            "returns": "void",
            "purpose": "Handles form submission for email/password login."
          },
          {
            "dependencies": [
              "googleSignIn",
              "setError",
              "onSuccess"
            ],
            "returns": "void",
            "name": "handleGoogleSignIn",
            "params": [],
            "stateInteractions": {
              "reads": [
                "error"
              ],
              "writes": [
                "error"
              ]
            },
            "purpose": "Handles Google sign-in."
          }
        ],
        "classes": [],
        "imports": [
          "../../context/AuthContext",
          "react-router-dom",
          "lucide-react"
        ],
        "exports": [],
        "language": "tsx",
        "size": 4614
      },
      "src/components/Auth/Register.tsx": {
        "description": "This component provides a user registration form with email/password and Google sign-in options. It uses React Context for authentication and React Router for navigation.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "../../context/AuthContext",
          "react-router-dom",
          "lucide-react"
        ],
        "lastAnalyzed": "2025-01-05T21:54:46",
        "functions": [
          {
            "returns": "An error string if the password is invalid, or an empty string if valid.",
            "name": "validatePassword",
            "params": [
              "password: string"
            ],
            "purpose": "Validates the strength of the password based on length and character requirements.",
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "dependencies": []
          },
          {
            "purpose": "Handles the form submission for email/password registration.",
            "returns": "void",
            "params": [
              "e: React.FormEvent"
            ],
            "dependencies": [
              "register",
              "validatePassword",
              "navigate",
              "name",
              "email",
              "password",
              "confirmPassword",
              "setError",
              "setPasswordError"
            ],
            "stateInteractions": {
              "reads": [
                "name",
                "email",
                "password",
                "confirmPassword"
              ],
              "writes": [
                "error",
                "passwordError"
              ]
            },
            "name": "handleSubmit"
          },
          {
            "name": "handleGoogleSignUp",
            "dependencies": [
              "googleSignIn",
              "navigate",
              "setError"
            ],
            "returns": "void",
            "purpose": "Handles the Google sign-up button click.",
            "stateInteractions": {
              "reads": [],
              "writes": [
                "error"
              ]
            },
            "params": []
          }
        ],
        "classes": [],
        "imports": [
          "../../context/AuthContext",
          "react-router-dom",
          "lucide-react"
        ],
        "exports": [],
        "language": "tsx",
        "size": 6346
      },
      "src/components/Chat/ChatInterface.tsx": {
        "description": "This component renders a chat interface for both direct messages (DMs) and a general chat channel. It uses Firebase for real-time message updates and user data. It leverages React Context for authentication and account information.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "react-router-dom",
          "../../context/AuthContext",
          "../../services/chat",
          "../../types/user",
          "../../types/message",
          "./MessageList",
          "./MessageInput",
          "../../styles",
          "../../context/AccountContext",
          "firebase/firestore",
          "../../utils/dateUtils"
        ],
        "lastAnalyzed": "2025-02-19T18:46:04",
        "functions": [
          {
            "dependencies": [],
            "purpose": "Type guard to check if a value is a Firestore Timestamp.",
            "params": [
              "value: any"
            ],
            "name": "isFirestoreTimestamp",
            "returns": "boolean",
            "stateInteractions": {
              "writes": [],
              "reads": []
            }
          },
          {
            "purpose": "Creates a consistent channel ID for direct messages by sorting user IDs.",
            "name": "getDMChannelId",
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "dependencies": [],
            "returns": "string",
            "params": [
              "user1Id: string",
              "user2Id: string"
            ]
          },
          {
            "name": "handleSendMessage",
            "params": [
              "e: React.FormEvent"
            ],
            "purpose": "Sends a new message to the chat service.",
            "returns": "void",
            "dependencies": [
              "message",
              "user",
              "currentAccount",
              "sendMessage",
              "channelId"
            ],
            "stateInteractions": {
              "writes": [
                "message"
              ],
              "reads": [
                "message",
                "user",
                "currentAccount",
                "channelId"
              ]
            }
          }
        ],
        "classes": [],
        "imports": [
          "react-router-dom",
          "../../context/AuthContext",
          "../../services/chat",
          "../../types/user",
          "../../types/message",
          "./MessageList",
          "./MessageInput",
          "../../styles",
          "../../context/AccountContext",
          "firebase/firestore",
          "../../utils/dateUtils"
        ],
        "exports": [],
        "language": "tsx",
        "size": 6272
      },
      "src/components/Chat/EmojiPicker.tsx": {
        "description": "This component renders an emoji picker using the @emoji-mart/react library. It allows users to select emojis and provides theming support for light and dark modes.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "react",
          "@emoji-mart/data",
          "@emoji-mart/react",
          "../../styles"
        ],
        "lastAnalyzed": "2025-02-08T12:13:44",
        "functions": [
          {
            "purpose": "Renders an emoji picker and handles emoji selection.",
            "dependencies": [
              "@emoji-mart/react",
              "../../styles"
            ],
            "stateInteractions": {
              "reads": [
                "theme"
              ],
              "writes": []
            },
            "name": "EmojiPicker",
            "returns": "React component",
            "params": [
              "onEmojiSelect",
              "theme"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "react",
          "@emoji-mart/data",
          "@emoji-mart/react",
          "../../styles"
        ],
        "exports": [],
        "language": "tsx",
        "size": 2620
      },
      "src/components/Chat/MessageInput.tsx": {
        "description": "This component provides a message input form with an integrated emoji picker. It allows users to type a message, add emojis, and send the message. The component manages its internal state for showing/hiding the emoji picker and updates the parent component's message state.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "lucide-react",
          "./EmojiPicker",
          "../../styles"
        ],
        "lastAnalyzed": "2025-02-08T12:13:44",
        "functions": [
          {
            "name": "MessageInput",
            "params": [
              "message",
              "setMessage",
              "handleSendMessage",
              "className"
            ],
            "stateInteractions": {
              "reads": [
                "message",
                "showEmojiPicker"
              ],
              "writes": [
                "message",
                "showEmojiPicker"
              ]
            },
            "purpose": "Renders a message input form with emoji support.",
            "dependencies": [
              "useState",
              "EmojiPicker",
              "styles"
            ],
            "returns": "React component (JSX)"
          },
          {
            "returns": "void",
            "name": "handleEmojiSelect",
            "params": [
              "emoji"
            ],
            "purpose": "Adds the selected emoji to the message.",
            "stateInteractions": {
              "reads": [
                "message"
              ],
              "writes": [
                "message",
                "showEmojiPicker"
              ]
            },
            "dependencies": [
              "setMessage",
              "setShowEmojiPicker"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "lucide-react",
          "./EmojiPicker",
          "../../styles"
        ],
        "exports": [],
        "language": "tsx",
        "size": 3317
      },
      "src/components/Chat/MessageList.tsx": {
        "description": "This component displays a list of chat messages, grouped by date and sender. It supports message reactions, editing, and deletion. It integrates with Firebase for data persistence.",
        "features": [
          "external dependencies",
          "function definitions",
          "class definitions"
        ],
        "dependencies": [
          "../../types/message",
          "../../types/user",
          "../../styles",
          "lucide-react",
          "date-fns",
          "../../utils/dateUtils",
          "../../services/chat",
          "firebase/firestore",
          "firebase/firestore",
          "../../services/firebase"
        ],
        "lastAnalyzed": "2025-02-19T18:46:04",
        "functions": [
          {
            "stateInteractions": {
              "writes": [
                "Firestore document"
              ],
              "reads": [
                "messages"
              ]
            },
            "purpose": "Adds or removes a reaction to a message in Firestore.",
            "name": "handleReaction",
            "dependencies": [
              "db",
              "messages",
              "currentUser.uid",
              "updateDoc",
              "arrayUnion",
              "arrayRemove"
            ],
            "params": [
              "messageId",
              "emoji"
            ],
            "returns": "void"
          },
          {
            "returns": "void",
            "stateInteractions": {
              "writes": [
                "Firestore document",
                "editingMessageId"
              ],
              "reads": [
                "editingMessageId"
              ]
            },
            "params": [
              "messageId",
              "newContent"
            ],
            "name": "handleEdit",
            "dependencies": [
              "db",
              "currentUser.uid",
              "updateDoc",
              "setEditingMessageId"
            ],
            "purpose": "Updates a message's content and edited timestamp in Firestore."
          },
          {
            "returns": "void",
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "dependencies": [
              "messagesEndRef"
            ],
            "purpose": "Scrolls the message list to the bottom.",
            "params": [],
            "name": "scrollToBottom"
          }
        ],
        "classes": [
          {
            "properties": [
              "userData",
              "size",
              "imageError",
              "initials"
            ],
            "purpose": "Displays a user's avatar or initials.",
            "name": "UserAvatar",
            "methods": [],
            "dependencies": []
          },
          {
            "methods": [
              "formatDate"
            ],
            "purpose": "Displays a date separator between message groups.",
            "name": "DateSeparator",
            "dependencies": [],
            "properties": [
              "date"
            ]
          },
          {
            "dependencies": [],
            "properties": [
              "onSelect",
              "onClose",
              "commonEmojis"
            ],
            "methods": [],
            "purpose": "Displays a simple emoji picker.",
            "name": "EmojiPicker"
          }
        ],
        "imports": [
          "../../types/message",
          "../../types/user",
          "../../styles",
          "lucide-react",
          "date-fns",
          "../../utils/dateUtils",
          "../../services/chat",
          "firebase/firestore",
          "firebase/firestore",
          "../../services/firebase"
        ],
        "exports": [],
        "language": "tsx",
        "size": 20533
      },
      "src/components/Codebase/CodebaseViewer.tsx": {
        "description": "This component displays the codebase of a connected GitHub repository, allowing users to view files, search, sort, and filter them. It integrates with Firebase for data storage and GitHub for repository synchronization.  It uses Material UI for the table display and Lucide React for icons.  The component also displays metrics about the repository sync history.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "react",
          "../../services/firebase",
          "firebase/firestore",
          "lucide-react",
          "../../context/AccountContext",
          "../../context/AuthContext",
          "react-router-dom",
          "@mui/material",
          "react-icons/si",
          "../../services/github",
          "recharts",
          "@mui/material/styles",
          "./FileViewer",
          "../../types/repository",
          "./components/ExpandableCell",
          "./components/FileIcon"
        ],
        "lastAnalyzed": "2025-02-19T18:46:04",
        "functions": [
          {
            "params": [
              "bytes: number"
            ],
            "returns": "string",
            "dependencies": [],
            "purpose": "Formats a file size in bytes to a human-readable string (e.g., KB, MB, GB).",
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "name": "formatFileSize"
          },
          {
            "name": "formatDate",
            "purpose": "Formats a timestamp to a locale string.",
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "dependencies": [],
            "params": [
              "timestamp: any"
            ],
            "returns": "string"
          },
          {
            "returns": "string",
            "params": [
              "content: string | undefined"
            ],
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "name": "getContentPreview",
            "dependencies": [],
            "purpose": "Returns a preview of the content by truncating it to 100 characters."
          },
          {
            "dependencies": [
              "./components/FileIcon"
            ],
            "returns": "JSX.Element",
            "name": "getFileIcon",
            "purpose": "Returns a file icon component based on the file path.",
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "params": [
              "filePath: string"
            ]
          },
          {
            "returns": "string",
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "dependencies": [],
            "params": [
              "item: string | { name: string }"
            ],
            "purpose": "Helper to get the name from either a string or an object with a name property",
            "name": "getName"
          },
          {
            "name": "searchFile",
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "purpose": "Filters files based on a search term by looking at the file path, functions and classes",
            "dependencies": [],
            "returns": "boolean",
            "params": [
              "file: RepositoryFile",
              "searchTerm: string"
            ]
          },
          {
            "params": [],
            "dependencies": [
              "react",
              "firebase/firestore",
              "lucide-react",
              "../../context/AccountContext",
              "../../context/AuthContext",
              "react-router-dom",
              "@mui/material",
              "react-icons/si",
              "../../services/github",
              "./FileViewer",
              "./components/ExpandableCell",
              "./components/FileIcon"
            ],
            "purpose": "Main component to display the codebase, manage state, and handle interactions.",
            "name": "CodebaseViewer",
            "returns": "JSX.Element",
            "stateInteractions": {
              "reads": [
                "currentAccount",
                "accountLoading",
                "user",
                "files",
                "loading",
                "error",
                "selectedFile",
                "page",
                "rowsPerPage",
                "searchTerm",
                "sortColumn",
                "sortDirection",
                "syncStatus",
                "githubStatus",
                "filterStatus"
              ],
              "writes": [
                "loading",
                "files",
                "error",
                "selectedFile",
                "page",
                "rowsPerPage",
                "searchTerm",
                "sortColumn",
                "sortDirection",
                "syncStatus",
                "githubStatus",
                "filterStatus"
              ]
            }
          },
          {
            "dependencies": [
              "react",
              "firebase/firestore",
              "recharts"
            ],
            "purpose": "Displays metrics related to the repository sync, including latest stats, historical chart, and file status summary.",
            "stateInteractions": {
              "writes": [
                "metrics",
                "loading"
              ],
              "reads": [
                "repoId",
                "metrics",
                "loading"
              ]
            },
            "returns": "JSX.Element",
            "params": [
              {
                "repoId": "string"
              }
            ],
            "name": "CodebaseMetrics"
          }
        ],
        "classes": [],
        "imports": [
          "react",
          "../../services/firebase",
          "firebase/firestore",
          "lucide-react",
          "../../context/AccountContext",
          "../../context/AuthContext",
          "react-router-dom",
          "@mui/material",
          "react-icons/si",
          "../../services/github",
          "recharts",
          "@mui/material/styles",
          "./FileViewer",
          "../../types/repository",
          "./components/ExpandableCell",
          "./components/FileIcon"
        ],
        "exports": [
          "CodebaseMetrics"
        ],
        "language": "tsx",
        "size": 31292
      },
      "src/components/Codebase/FileExtractionTool.tsx": {
        "description": "The `FileExtractionTool` component allows users to select a file from the 'mmbely/qeek' repository, analyze it using the Gemini API, and view the results.  It uses a custom prompt to guide the analysis, focusing on development-relevant details. The component manages state for file selection, search, API request/response, and UI elements like the dropdown and tabs. It integrates with the GitHub API for file retrieval and the Gemini API for code analysis.  The core functionality involves fetching repository files, allowing users to filter and select a file, sending the file content and prompt to the Gemini API, displaying the raw and formatted response, and showing API usage metrics.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "lucide-react",
          "react-markdown",
          "../../services/github",
          "../../services/geminiFrontend",
          "../../styles/theme",
          "../../context/AccountContext"
        ],
        "lastAnalyzed": "2025-02-20T20:35:38",
        "functions": [
          {
            "returns": "JSX.Element",
            "dependencies": [
              "getRepositoryFiles",
              "getFileContent",
              "generateAISummary",
              "useAccount",
              "useState",
              "useEffect",
              "useMemo"
            ],
            "params": [],
            "purpose": "Main component for interacting with the Gemini API to analyze selected files.",
            "name": "FileExtractionTool",
            "stateInteractions": {
              "writes": [
                "files",
                "selectedFile",
                "isDropdownOpen",
                "searchQuery",
                "activeTab",
                "lastRequest",
                "prompt",
                "response",
                "loading",
                "copyStatus"
              ],
              "reads": [
                "files",
                "selectedFile",
                "isDropdownOpen",
                "searchQuery",
                "activeTab",
                "lastRequest",
                "prompt",
                "response",
                "loading",
                "currentAccount",
                "copyStatus"
              ]
            }
          },
          {
            "params": [],
            "purpose": "Fetches file content, constructs the full prompt, calls the Gemini API, and handles the response/error.",
            "returns": "void",
            "stateInteractions": {
              "reads": [
                "prompt",
                "selectedFile",
                "currentAccount"
              ],
              "writes": [
                "loading",
                "response",
                "lastRequest"
              ]
            },
            "dependencies": [
              "getFileContent",
              "generateAISummary",
              "prompt",
              "selectedFile",
              "currentAccount",
              "setLoading",
              "setResponse",
              "setLastRequest"
            ],
            "name": "handleTest"
          },
          {
            "returns": "void",
            "params": [
              "text",
              "type"
            ],
            "name": "handleCopy",
            "purpose": "Copies text to clipboard and provides visual feedback.",
            "dependencies": [
              "navigator.clipboard",
              "setCopyStatus"
            ],
            "stateInteractions": {
              "reads": [],
              "writes": [
                "copyStatus"
              ]
            }
          },
          {
            "returns": "string",
            "params": [],
            "purpose": "Extracts and returns the formatted text content from the Gemini response.",
            "dependencies": [
              "response"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": [
                "response"
              ]
            },
            "name": "getFormattedResponse"
          },
          {
            "name": "getMetrics",
            "stateInteractions": {
              "writes": [],
              "reads": [
                "response"
              ]
            },
            "returns": "Metrics | null",
            "purpose": "Extracts and returns the metrics from the Gemini response.",
            "params": [],
            "dependencies": [
              "response"
            ]
          },
          {
            "dependencies": [],
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "params": [
              "metrics"
            ],
            "purpose": "Formats the metrics object for display in the UI.",
            "name": "formatMetrics",
            "returns": "JSX.Element | string"
          }
        ],
        "classes": [],
        "imports": [
          "lucide-react",
          "react-markdown",
          "../../services/github",
          "../../services/geminiFrontend",
          "../../styles/theme",
          "../../context/AccountContext"
        ],
        "exports": [],
        "language": "tsx",
        "size": 19446
      },
      "src/components/Codebase/FileViewer.tsx": {
        "description": "This component displays detailed information about a file in a repository, including metadata, Git information, code analysis (functions and classes), and a content preview. It uses Lucide React for icons and custom utility functions for formatting.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "react",
          "lucide-react",
          "../../types/repository",
          "./utils",
          "./components/ExpandableCell"
        ],
        "lastAnalyzed": "2025-02-19T08:17:24",
        "functions": [
          {
            "params": [
              "file",
              "onClose"
            ],
            "returns": "JSX.Element representing the file viewer modal.",
            "purpose": "Renders a modal view displaying detailed file information.",
            "name": "FileViewer",
            "dependencies": [
              "RepositoryFile type",
              "formatFileSize",
              "getFileIcon",
              "ExpandableCell"
            ],
            "stateInteractions": {
              "reads": [
                "file prop"
              ],
              "writes": []
            }
          },
          {
            "dependencies": [],
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "purpose": "Utility to format file sizes for display",
            "params": [
              "size"
            ],
            "returns": "string",
            "name": "formatFileSize"
          },
          {
            "params": [
              "path"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "dependencies": [],
            "returns": "JSX.Element",
            "name": "getFileIcon",
            "purpose": "Utility to determine the relevant icon for a file based on path"
          }
        ],
        "classes": [],
        "imports": [
          "react",
          "lucide-react",
          "../../types/repository",
          "./utils",
          "./components/ExpandableCell"
        ],
        "exports": [
          "FileViewer"
        ],
        "language": "tsx",
        "size": 6476
      },
      "src/components/Codebase/components/ExpandableCell.tsx": {
        "description": "A React component that displays a list of items, initially showing only the first two, and provides a button to expand and view all items if there are more than two.  Uses local state to manage the expanded/collapsed view.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "lucide-react"
        ],
        "lastAnalyzed": "2025-02-19T18:46:04",
        "functions": [
          {
            "params": [
              "items: { items?: string[] | { name: string }[] }"
            ],
            "dependencies": [
              "useState hook"
            ],
            "purpose": "Renders a list of items with expand/collapse functionality.",
            "returns": "JSX.Element representing the rendered component",
            "name": "ExpandableCell",
            "stateInteractions": {
              "writes": [
                "isExpanded"
              ],
              "reads": [
                "isExpanded"
              ]
            }
          }
        ],
        "classes": [],
        "imports": [
          "lucide-react"
        ],
        "exports": [
          "ExpandableCell"
        ],
        "language": "tsx",
        "size": 1410
      },
      "src/components/Codebase/components/FileIcon.tsx": {
        "description": "This component renders an icon based on the provided file path. It supports a variety of file extensions and special file names, using language-specific icons or defaults for unknown types.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "react",
          "react-icons/si",
          "lucide-react"
        ],
        "lastAnalyzed": "2025-02-19T08:17:24",
        "functions": [
          {
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "name": "FileIcon",
            "returns": "A React component representing the appropriate file icon.",
            "params": [
              "filePath",
              "className"
            ],
            "purpose": "Renders a file icon based on the file path.",
            "dependencies": [
              "react-icons/si",
              "lucide-react"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "react",
          "react-icons/si",
          "lucide-react"
        ],
        "exports": [
          "FileIcon"
        ],
        "language": "tsx",
        "size": 3255
      },
      "src/components/Codebase/utils/formatters.ts": {
        "description": "This code provides utility functions for formatting file sizes, dates, and content previews. It handles various data types and formats for flexibility.",
        "features": [
          "function definitions",
          "exports"
        ],
        "dependencies": [],
        "lastAnalyzed": "2025-02-19T08:17:24",
        "functions": [
          {
            "dependencies": [],
            "params": [
              "bytes: number"
            ],
            "name": "formatFileSize",
            "purpose": "Formats a file size in bytes to a human-readable string (e.g., KB, MB, GB).",
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "returns": "string representation of the file size"
          },
          {
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "purpose": "Formats a timestamp into a locale-specific date and time string. Handles Firestore Timestamps and other date/number formats.",
            "name": "formatDate",
            "params": [
              "timestamp: any"
            ],
            "dependencies": [],
            "returns": "Formatted date string or '-' if timestamp is invalid."
          },
          {
            "params": [
              "content: string | undefined"
            ],
            "name": "getContentPreview",
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "purpose": "Creates a preview of a string by truncating it to 100 characters and appending '...' if necessary.",
            "dependencies": [],
            "returns": "Preview string or '-' if content is undefined/null."
          }
        ],
        "classes": [],
        "imports": [],
        "exports": [
          "formatFileSize",
          "formatDate",
          "getContentPreview"
        ],
        "language": "ts",
        "size": 708
      },
      "src/components/Codebase/utils/index.tsx": {
        "description": "Provides utility functions for formatting file sizes, dates, and generating file previews. Also exports a component for displaying file icons.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "react",
          "./formatters",
          "../components/FileIcon"
        ],
        "lastAnalyzed": "2025-02-19T08:17:24",
        "functions": [
          {
            "name": "getFileIcon",
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "purpose": "Renders a FileIcon component with provided filePath and default styling.",
            "params": [
              "filePath: string"
            ],
            "returns": "JSX.Element representing a file icon.",
            "dependencies": [
              "FileIcon"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "react",
          "./formatters",
          "../components/FileIcon"
        ],
        "exports": [
          "getFileIcon"
        ],
        "language": "tsx",
        "size": 357
      },
      "src/components/Layout.tsx": {
        "description": "Layout component providing the main application structure, including sidebar navigation, user authentication integration, and dynamic channel/user list management. It subscribes to real-time user updates and handles navigation and UI state.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "react-router-dom",
          "./Navigation/Sidebar",
          "../context/AuthContext",
          "../context/AccountContext",
          "../types/user",
          "../services/chat"
        ],
        "lastAnalyzed": "2025-02-15T14:35:59",
        "functions": [
          {
            "dependencies": [
              "useAuth",
              "useAccount",
              "useNavigate",
              "Sidebar",
              "subscribeToUsers"
            ],
            "purpose": "Main layout component rendering the app structure and handling navigation/state.",
            "name": "Layout",
            "params": [],
            "stateInteractions": {
              "reads": [
                "user",
                "logout",
                "isDarkMode",
                "toggleDarkMode",
                "currentAccount",
                "channels",
                "users",
                "currentChannel"
              ],
              "writes": [
                "isMobileMenuOpen",
                "isDirectMessageModalOpen",
                "isCreateChannelModalOpen",
                "currentChannel",
                "users"
              ]
            },
            "returns": "JSX.Element representing the layout"
          },
          {
            "params": [],
            "dependencies": [
              "logout",
              "navigate"
            ],
            "returns": "void",
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "purpose": "Logs the user out and navigates to the login page.",
            "name": "handleLogout"
          },
          {
            "params": [
              "user1Id (string)",
              "user2Id (string)"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "purpose": "Generates a unique channel ID for direct messages based on sorted user IDs.",
            "returns": "string (DM channel ID)",
            "dependencies": [],
            "name": "getDMChannelId"
          },
          {
            "purpose": "Initiates a direct message with a specified user by generating the channel ID and navigating to the chat route.",
            "name": "handleStartDirectMessage",
            "params": [
              "userId (string)"
            ],
            "returns": "void",
            "stateInteractions": {
              "reads": [
                "user"
              ],
              "writes": [
                "currentChannel"
              ]
            },
            "dependencies": [
              "getDMChannelId",
              "setCurrentChannel",
              "navigate",
              "user"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "react-router-dom",
          "./Navigation/Sidebar",
          "../context/AuthContext",
          "../context/AccountContext",
          "../types/user",
          "../services/chat"
        ],
        "exports": [],
        "language": "tsx",
        "size": 3273
      },
      "src/components/Navigation/Sidebar.tsx": {
        "description": "This component renders the sidebar navigation for the application, including links to tickets, codebase, direct messages, and channels. It manages the display of user avatars, handles dark mode toggling, and user logout. It dynamically fetches and displays users associated with the current account for direct messaging.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "react-router-dom",
          "lucide-react",
          "../ui/scroll-area",
          "../ui/button",
          "../../types/user",
          "../../styles/theme",
          "../../styles/animations",
          "../../styles/theme",
          "../../services/chat",
          "../../context/AccountContext",
          "../../context/AuthContext",
          "firebase/firestore",
          "../../config/firebase"
        ],
        "lastAnalyzed": "2025-02-20T20:35:38",
        "functions": [
          {
            "purpose": "Renders a user avatar with initials or an image based on provided user data.",
            "dependencies": [
              "userData",
              "useState"
            ],
            "stateInteractions": {
              "writes": [
                "imageError"
              ],
              "reads": [
                "userData"
              ]
            },
            "params": [
              "userData",
              "size"
            ],
            "returns": "JSX element representing the user avatar.",
            "name": "UserAvatar"
          },
          {
            "stateInteractions": {
              "writes": [
                "currentChannel",
                "isMobileMenuOpen",
                "accountUsers",
                "isLoading"
              ],
              "reads": [
                "location",
                "currentAccount",
                "authUser",
                "channels",
                "users",
                "currentChannel",
                "isDarkMode",
                "isMobileMenuOpen",
                "accountUsers",
                "isLoading"
              ]
            },
            "dependencies": [
              "useLocation",
              "useAccount",
              "useAuth",
              "useState",
              "useEffect",
              "subscribeToUsers",
              "channels",
              "users",
              "currentChannel",
              "accountUsers",
              "isLoading"
            ],
            "purpose": "Renders the sidebar navigation, handles user interactions, and manages state for the sidebar.",
            "returns": "JSX element representing the sidebar.",
            "name": "Sidebar",
            "params": [
              "user",
              "channels",
              "users",
              "currentChannel",
              "isDarkMode",
              "isMobileMenuOpen",
              "setCurrentChannel",
              "setIsMobileMenuOpen",
              "setIsDirectMessageModalOpen",
              "setIsCreateChannelModalOpen",
              "toggleDarkMode",
              "handleLogout",
              "handleStartDirectMessage"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "react-router-dom",
          "lucide-react",
          "../ui/scroll-area",
          "../ui/button",
          "../../types/user",
          "../../styles/theme",
          "../../styles/animations",
          "../../styles/theme",
          "../../services/chat",
          "../../context/AccountContext",
          "../../context/AuthContext",
          "firebase/firestore",
          "../../config/firebase"
        ],
        "exports": [
          "Sidebar"
        ],
        "language": "tsx",
        "size": 11500
      },
      "src/components/Settings/AdminSettings.tsx": {
        "description": "AdminSettings component provides super admin controls for database migrations (tickets and repositories) and debugging repository data. It restricts access based on a hardcoded SUPER_ADMIN_ID.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "lucide-react",
          "../../migrations",
          "../../context/AuthContext",
          "firebase/firestore",
          "../../config/firebase",
          "firebase/firestore"
        ],
        "lastAnalyzed": "2025-02-17T20:48:14",
        "functions": [
          {
            "dependencies": [
              "migrations",
              "setIsLoading",
              "setResults"
            ],
            "name": "handleMigration",
            "stateInteractions": {
              "reads": [
                "isLoading",
                "migrations"
              ],
              "writes": [
                "isLoading",
                "results"
              ]
            },
            "params": [
              "migrationKey: string"
            ],
            "purpose": "Executes a specific database migration and updates state with results.",
            "returns": "void"
          },
          {
            "params": [],
            "stateInteractions": {
              "writes": [
                "isLoading",
                "results"
              ],
              "reads": [
                "isLoading",
                "user"
              ]
            },
            "purpose": "Migrates repository documents in Firestore by adding accountId field based on metadata or defaults to SUPER_ADMIN_ID.",
            "name": "handleRepositoryMigration",
            "dependencies": [
              "db",
              "collection",
              "getDocs",
              "doc",
              "updateDoc",
              "serverTimestamp",
              "user",
              "setIsLoading",
              "setResults"
            ],
            "returns": "void"
          },
          {
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "purpose": "Retrieves and logs all repository documents from Firestore to the console for debugging purposes.",
            "name": "handleDebugRepositories",
            "dependencies": [
              "db",
              "collection",
              "getDocs"
            ],
            "params": [],
            "returns": "void"
          }
        ],
        "classes": [],
        "imports": [
          "lucide-react",
          "../../migrations",
          "../../context/AuthContext",
          "firebase/firestore",
          "../../config/firebase",
          "firebase/firestore"
        ],
        "exports": [],
        "language": "tsx",
        "size": 9842
      },
      "src/components/Settings/GitHubSettings.tsx": {
        "description": "This component manages GitHub integration, allowing users to connect their GitHub account, select a repository, and synchronize its contents. It uses Firebase for storing secure tokens and repository metadata, and provides UI elements for managing the connection, selecting repositories, and displaying synchronization status.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "lucide-react",
          "../../services/github",
          "../../context/AuthContext",
          "../../context/CodebaseContext",
          "../../context/AccountContext",
          "../../services/github",
          "firebase/firestore",
          "../../services/firebase"
        ],
        "lastAnalyzed": "2025-02-19T18:46:04",
        "functions": [
          {
            "dependencies": [
              "useAuth",
              "useCodebase",
              "useAccount",
              "github service functions",
              "firebase functions"
            ],
            "purpose": "Manages GitHub integration settings, allowing users to connect their account, choose a repository, and synchronize it.",
            "params": [],
            "stateInteractions": {
              "reads": [
                "user",
                "selectedRepository",
                "currentAccount",
                "token",
                "isConnected",
                "isLoading",
                "error",
                "showToken",
                "repositories",
                "selectedRepo",
                "isDropdownOpen",
                "searchQuery",
                "syncStatus"
              ],
              "writes": [
                "token",
                "isConnected",
                "isLoading",
                "error",
                "showToken",
                "repositories",
                "selectedRepo",
                "selectedRepository",
                "isDropdownOpen",
                "searchQuery",
                "showSavedMessage",
                "syncStatus"
              ]
            },
            "name": "GitHubSettings",
            "returns": "JSX element representing the GitHub settings UI"
          },
          {
            "dependencies": [
              "currentAccount",
              "fetch",
              "setRepositories",
              "setError",
              "setIsLoading"
            ],
            "purpose": "Fetches the user's GitHub repositories using the stored token.",
            "params": [],
            "stateInteractions": {
              "reads": [
                "currentAccount"
              ],
              "writes": [
                "isLoading",
                "repositories",
                "error"
              ]
            },
            "name": "loadRepositories",
            "returns": "void"
          },
          {
            "params": [
              "token: string"
            ],
            "stateInteractions": {
              "writes": [
                "isLoading",
                "error",
                "repositories",
                "isConnected",
                "token"
              ],
              "reads": [
                "currentAccount",
                "token"
              ]
            },
            "returns": "void",
            "dependencies": [
              "currentAccount",
              "storeGithubToken",
              "fetchUserRepositories",
              "setIsConnected",
              "setToken",
              "setError",
              "setIsLoading"
            ],
            "name": "handleGitHubConnect",
            "purpose": "Handles connecting a GitHub account using a provided token."
          },
          {
            "dependencies": [
              "currentAccount",
              "clearToken",
              "setIsConnected",
              "setRepositories",
              "setSelectedRepository",
              "setError",
              "setIsLoading"
            ],
            "params": [],
            "returns": "void",
            "stateInteractions": {
              "writes": [
                "isLoading",
                "isConnected",
                "repositories",
                "selectedRepository",
                "error"
              ],
              "reads": [
                "currentAccount"
              ]
            },
            "purpose": "Handles disconnecting the GitHub account.",
            "name": "handleDisconnect"
          },
          {
            "purpose": "Handles selecting a repository and initiates synchronization.",
            "name": "handleRepositorySelect",
            "dependencies": [
              "user",
              "currentAccount",
              "setSelectedRepo",
              "setSelectedRepository",
              "syncRepository",
              "updateAccountSettings",
              "setShowSavedMessage",
              "setIsDropdownOpen",
              "setSearchQuery",
              "setError",
              "setSyncStatus"
            ],
            "params": [
              "repo: GitHubRepo"
            ],
            "returns": "void",
            "stateInteractions": {
              "reads": [
                "user",
                "currentAccount",
                "repo"
              ],
              "writes": [
                "selectedRepo",
                "selectedRepository",
                "syncStatus",
                "showSavedMessage",
                "isDropdownOpen",
                "searchQuery",
                "error"
              ]
            }
          },
          {
            "stateInteractions": {
              "writes": [
                "isLoading",
                "syncStatus",
                "error"
              ],
              "reads": [
                "currentAccount",
                "selectedRepo"
              ]
            },
            "name": "handleRetrieveRepository",
            "returns": "void",
            "params": [],
            "purpose": "Handles retrieving and synchronizing the selected repository.",
            "dependencies": [
              "currentAccount",
              "selectedRepo",
              "syncRepository",
              "updateAccountSettings",
              "setError",
              "setIsLoading",
              "setSyncStatus"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "lucide-react",
          "../../services/github",
          "../../context/AuthContext",
          "../../context/CodebaseContext",
          "../../context/AccountContext",
          "../../services/github",
          "firebase/firestore",
          "../../services/firebase"
        ],
        "exports": [],
        "language": "tsx",
        "size": 20570
      },
      "src/components/Settings/SettingsLayout.tsx": {
        "description": "This component renders a settings layout with a sidebar for navigation and a content area. The sidebar dynamically displays navigation items, including a conditionally rendered 'Admin' section based on the user's ID. It uses React Router for navigation and Lucide React for icons.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "react",
          "react-router-dom",
          "lucide-react",
          "../../context/AuthContext"
        ],
        "lastAnalyzed": "2025-02-12T06:04:35",
        "functions": [
          {
            "purpose": "Renders the settings layout with a navigation sidebar and a content area.",
            "params": [],
            "dependencies": [
              "useAuth",
              "useLocation",
              "navItems"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": [
                "user.uid",
                "location.pathname"
              ]
            },
            "returns": "JSX.Element representing the settings layout.",
            "name": "SettingsLayout"
          }
        ],
        "classes": [],
        "imports": [
          "react",
          "react-router-dom",
          "lucide-react",
          "../../context/AuthContext"
        ],
        "exports": [],
        "language": "tsx",
        "size": 2199
      },
      "src/components/Settings/UserManagement.tsx": {
        "description": "This component manages users within an account. It allows adding new users by email (checking if they exist in Firestore and aren't already members), displays current users with their details (name, email, role, join date), and enables removing users. It uses Firebase for data storage and leverages the AccountContext for account information.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "../../context/AccountContext",
          "lucide-react",
          "firebase/firestore",
          "../../config/firebase",
          "../../services/email"
        ],
        "lastAnalyzed": "2025-02-16T12:33:38",
        "functions": [
          {
            "purpose": "Manages users within an account, allowing adding and deleting users.",
            "dependencies": [
              "useAccount",
              "db",
              "useState",
              "useEffect"
            ],
            "name": "UserManagement",
            "returns": "JSX.Element",
            "params": [],
            "stateInteractions": {
              "writes": [
                "newUserEmail",
                "newUserRole",
                "isAdding",
                "error",
                "successMessage",
                "userDetails",
                "isLoadingUsers",
                "isDeletingUser"
              ],
              "reads": [
                "currentAccount",
                "userDetails",
                "isLoadingUsers",
                "isDeletingUser",
                "error",
                "successMessage",
                "newUserEmail",
                "newUserRole"
              ]
            }
          },
          {
            "stateInteractions": {
              "writes": [
                "isAdding",
                "error",
                "successMessage",
                "newUserEmail",
                "userDetails"
              ],
              "reads": [
                "currentAccount",
                "newUserEmail",
                "newUserRole"
              ]
            },
            "returns": "void",
            "purpose": "Adds a new user to the account.",
            "params": [
              "e: React.FormEvent"
            ],
            "dependencies": [
              "currentAccount",
              "db",
              "setNewUserEmail",
              "setUserDetails",
              "setIsAdding",
              "setError",
              "setSuccessMessage"
            ],
            "name": "handleAddUser"
          },
          {
            "purpose": "Removes a user from the account.",
            "stateInteractions": {
              "writes": [
                "isDeletingUser",
                "error",
                "successMessage",
                "userDetails"
              ],
              "reads": [
                "currentAccount",
                "userId"
              ]
            },
            "returns": "void",
            "name": "handleDeleteUser",
            "params": [
              "userId: string"
            ],
            "dependencies": [
              "currentAccount",
              "db",
              "setUserDetails",
              "setIsDeletingUser",
              "setError",
              "setSuccessMessage"
            ]
          },
          {
            "stateInteractions": {
              "writes": [
                "imageError"
              ],
              "reads": [
                "userData",
                "imageError"
              ]
            },
            "params": [
              {
                "userData": "UserData | undefined"
              }
            ],
            "dependencies": [
              "useState"
            ],
            "purpose": "Displays a user avatar based on their profile picture or initials.",
            "returns": "JSX.Element",
            "name": "UserAvatar"
          }
        ],
        "classes": [],
        "imports": [
          "../../context/AccountContext",
          "lucide-react",
          "firebase/firestore",
          "../../config/firebase",
          "../../services/email"
        ],
        "exports": [],
        "language": "tsx",
        "size": 11764
      },
      "src/components/Settings/UserProfile.tsx": {
        "description": "This component allows users to view and update their profile information, including display name, bio, location, company, and avatar. It fetches initial data from Firestore and updates it upon form submission. It also handles avatar uploads to Firebase Storage.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "../../context/AuthContext",
          "firebase/firestore",
          "../../services/firebase",
          "lucide-react",
          "firebase/storage"
        ],
        "lastAnalyzed": "2025-02-12T06:04:35",
        "functions": [
          {
            "params": [],
            "dependencies": [
              "useAuth",
              "db",
              "useState",
              "useEffect",
              "getStorage",
              "ref",
              "uploadBytes",
              "getDownloadURL"
            ],
            "name": "UserProfile",
            "stateInteractions": {
              "writes": [
                "isLoading",
                "isSaving",
                "error",
                "success",
                "formData"
              ],
              "reads": [
                "user",
                "isLoading",
                "isSaving",
                "error",
                "success",
                "formData"
              ]
            },
            "returns": "JSX.Element",
            "purpose": "Renders and manages the user profile form and avatar display."
          },
          {
            "name": "fetchUserProfile",
            "dependencies": [
              "user",
              "db",
              "doc",
              "getDoc",
              "setFormData",
              "setIsLoading",
              "setError"
            ],
            "params": [],
            "stateInteractions": {
              "reads": [
                "user"
              ],
              "writes": [
                "isLoading",
                "formData",
                "error"
              ]
            },
            "returns": "void",
            "purpose": "Fetches the user profile data from Firestore."
          },
          {
            "params": [
              "e: React.FormEvent"
            ],
            "returns": "void",
            "purpose": "Handles the form submission and updates the user profile in Firestore.",
            "stateInteractions": {
              "reads": [
                "user",
                "formData"
              ],
              "writes": [
                "isSaving",
                "error",
                "success"
              ]
            },
            "dependencies": [
              "user",
              "formData",
              "db",
              "doc",
              "updateDoc",
              "setIsSaving",
              "setError",
              "setSuccess"
            ],
            "name": "handleSubmit"
          },
          {
            "returns": "void",
            "stateInteractions": {
              "reads": [
                "user"
              ],
              "writes": [
                "isLoading",
                "error",
                "success"
              ]
            },
            "dependencies": [
              "user",
              "getStorage",
              "ref",
              "uploadBytes",
              "getDownloadURL",
              "db",
              "doc",
              "updateDoc",
              "setIsLoading",
              "setError",
              "setSuccess"
            ],
            "params": [
              "e: React.ChangeEvent<HTMLInputElement>"
            ],
            "name": "handleAvatarChange",
            "purpose": "Handles the avatar upload to Firebase Storage and updates the user's photoURL in Firestore."
          }
        ],
        "classes": [],
        "imports": [
          "../../context/AuthContext",
          "firebase/firestore",
          "../../services/firebase",
          "lucide-react",
          "firebase/storage"
        ],
        "exports": [],
        "language": "tsx",
        "size": 8820
      },
      "src/components/Settings/index.ts": {
        "description": "Exports components related to application settings, including layout, GitHub integration, and user management.",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-12T06:04:35",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "ts",
        "size": 186
      },
      "src/components/Tickets/TicketBoard.tsx": {
        "description": "A Kanban-style ticket board component that displays and manages tickets in different columns based on their status. Supports drag-and-drop to update ticket status and order, optimistic UI updates, and error handling. It uses Firebase for data storage and authentication, and integrates with a custom `useTickets` hook and `AccountContext`.  Offers two modes: 'development' and 'backlog'.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "firebase/firestore",
          "../../config/firebase",
          "../../types/ticket",
          "../../context/AuthContext",
          "../../config/firebase",
          "firebase/database",
          "@hello-pangea/dnd",
          "./TicketModal",
          "lucide-react",
          "../../styles",
          "../../hooks/useTickets",
          "../../context/AccountContext",
          "../../types/board",
          "../../types/board",
          "firebase/auth"
        ],
        "lastAnalyzed": "2025-02-15T16:36:38",
        "functions": [
          {
            "stateInteractions": {
              "writes": [
                "tickets",
                "users",
                "columns",
                "selectedTicket",
                "isCreateModalOpen",
                "failedTicketId",
                "authUsers"
              ],
              "reads": [
                "user",
                "currentAccount",
                "tickets",
                "users",
                "columns",
                "selectedTicket",
                "isCreateModalOpen",
                "failedTicketId",
                "authUsers"
              ]
            },
            "dependencies": [
              "useAuth",
              "useAccount",
              "useTickets",
              "firebase/database",
              "firebase/auth",
              "@hello-pangea/dnd"
            ],
            "purpose": "Renders a ticket board component for managing and visualizing tickets.",
            "name": "TicketBoard",
            "returns": "React component (JSX)",
            "params": [
              "{ mode = 'development' }: TicketBoardProps"
            ]
          },
          {
            "purpose": "Retrieves the display name of a user based on their ID.",
            "returns": "User's display name or a default string if not found.",
            "stateInteractions": {
              "reads": [
                "users"
              ],
              "writes": []
            },
            "params": [
              "userId: string"
            ],
            "dependencies": [
              "users"
            ],
            "name": "getUserName"
          },
          {
            "name": "handleDragEnd",
            "dependencies": [
              "columns",
              "updateTicket"
            ],
            "purpose": "Handles the drag-and-drop event when a ticket is moved between columns.",
            "stateInteractions": {
              "reads": [
                "columns"
              ],
              "writes": [
                "columns",
                "failedTicketId"
              ]
            },
            "returns": "void",
            "params": [
              "result: DropResult"
            ]
          },
          {
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "dependencies": [],
            "returns": "number",
            "purpose": "Calculates the new order value for a ticket when it is moved within a column.",
            "name": "calculateNewOrder",
            "params": [
              "prevOrder: number",
              "nextOrder: number"
            ]
          },
          {
            "name": "handleTicketClick",
            "params": [
              "ticket: Ticket"
            ],
            "dependencies": [],
            "purpose": "Sets the selected ticket when a ticket is clicked.",
            "stateInteractions": {
              "reads": [],
              "writes": [
                "selectedTicket"
              ]
            },
            "returns": "void"
          },
          {
            "params": [],
            "stateInteractions": {
              "reads": [
                "columns"
              ],
              "writes": [
                "columns"
              ]
            },
            "name": "handleMoveToBoard",
            "purpose": "Moves all tickets from the 'Next for Development' backlog column to the 'Selected for Development' column.",
            "returns": "void",
            "dependencies": [
              "columns",
              "updateTicket"
            ]
          },
          {
            "returns": "ColumnsType",
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "name": "organizeTicketsIntoColumns",
            "purpose": "Organizes the tickets into their respective columns based on their status and order.",
            "dependencies": [
              "mode"
            ],
            "params": [
              "tickets: Ticket[]"
            ]
          },
          {
            "purpose": "Refreshes the tickets displayed on the board by fetching them again and reorganizing the columns.",
            "name": "refreshTickets",
            "dependencies": [
              "currentAccount",
              "getTickets",
              "organizeTicketsIntoColumns"
            ],
            "params": [],
            "stateInteractions": {
              "writes": [
                "columns"
              ],
              "reads": [
                "currentAccount"
              ]
            },
            "returns": "void"
          },
          {
            "returns": "void",
            "purpose": "Refreshes the tickets and board state, primarily after updates.",
            "dependencies": [
              "currentAccount",
              "getTickets",
              "organizeTicketsIntoColumns"
            ],
            "params": [],
            "name": "refreshBoard",
            "stateInteractions": {
              "reads": [
                "currentAccount"
              ],
              "writes": [
                "tickets",
                "columns"
              ]
            }
          },
          {
            "returns": "void",
            "purpose": "Closes the ticket modal and clears the selected ticket.",
            "params": [],
            "stateInteractions": {
              "reads": [],
              "writes": [
                "selectedTicket",
                "isCreateModalOpen"
              ]
            },
            "dependencies": [],
            "name": "handleModalClose"
          },
          {
            "returns": "Promise<void>",
            "purpose": "Refreshes the tickets after saving changes in the modal and closes the modal.",
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "dependencies": [
              "refreshTickets",
              "handleModalClose"
            ],
            "params": [],
            "name": "handleModalSave"
          }
        ],
        "classes": [],
        "imports": [
          "firebase/firestore",
          "../../config/firebase",
          "../../types/ticket",
          "../../context/AuthContext",
          "../../config/firebase",
          "firebase/database",
          "@hello-pangea/dnd",
          "./TicketModal",
          "lucide-react",
          "../../styles",
          "../../hooks/useTickets",
          "../../context/AccountContext",
          "../../types/board",
          "../../types/board",
          "firebase/auth"
        ],
        "exports": [
          "TicketBoard"
        ],
        "language": "tsx",
        "size": 20478
      },
      "src/components/Tickets/TicketEdit.tsx": {
        "description": "This component allows users to edit existing tickets. It fetches ticket data based on the ID from the URL, displays a form with the ticket details, and updates the ticket in the database on submission.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "react-router-dom",
          "../../services/ticketService",
          "../../types/ticket",
          "../../services/firebase"
        ],
        "lastAnalyzed": "2025-02-10T20:41:17",
        "functions": [
          {
            "dependencies": [
              "ticketService",
              "useParams",
              "useNavigate",
              "useState",
              "useEffect"
            ],
            "stateInteractions": {
              "writes": [
                "ticket",
                "loading"
              ],
              "reads": [
                "id",
                "ticket",
                "loading"
              ]
            },
            "returns": "JSX.Element",
            "purpose": "Renders a form to edit a ticket and handles submission.",
            "params": [],
            "name": "TicketEdit"
          },
          {
            "purpose": "Fetches ticket data from the API and updates the component state.",
            "dependencies": [
              "id",
              "ticketService",
              "setTicket",
              "setLoading"
            ],
            "params": [],
            "name": "loadTicket",
            "returns": "Promise<void>",
            "stateInteractions": {
              "writes": [
                "ticket",
                "loading"
              ],
              "reads": [
                "id"
              ]
            }
          },
          {
            "params": [
              "e: React.FormEvent"
            ],
            "stateInteractions": {
              "reads": [
                "ticket",
                "id"
              ],
              "writes": []
            },
            "name": "handleSubmit",
            "purpose": "Handles form submission, updates the ticket in the API, and navigates to the ticket list.",
            "returns": "Promise<void>",
            "dependencies": [
              "ticket",
              "id",
              "ticketService",
              "navigate"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "react-router-dom",
          "../../services/ticketService",
          "../../types/ticket",
          "../../services/firebase"
        ],
        "exports": [],
        "language": "tsx",
        "size": 5810
      },
      "src/components/Tickets/TicketForm.tsx": {
        "description": "This component provides a form for creating new tickets. It integrates with Firebase Firestore to store ticket data and uses React Context for user authentication and account information.  It generates a sequential, padded ticket ID based on existing tickets.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "react-router-dom",
          "firebase/firestore",
          "../../services/firebase",
          "../../context/AuthContext",
          "../../types/ticket",
          "../../context/AccountContext"
        ],
        "lastAnalyzed": "2025-02-15T13:38:29",
        "functions": [
          {
            "stateInteractions": {
              "writes": [
                "loading",
                "error"
              ],
              "reads": [
                "currentAccount",
                "user",
                "loading",
                "error"
              ]
            },
            "purpose": "Handles form submission, creates a new ticket in Firestore, and navigates to the ticket list.",
            "dependencies": [
              "currentAccount",
              "user",
              "db",
              "navigate"
            ],
            "params": [
              "e: React.FormEvent<HTMLFormElement>"
            ],
            "returns": "void",
            "name": "handleSubmit"
          }
        ],
        "classes": [],
        "imports": [
          "react-router-dom",
          "firebase/firestore",
          "../../services/firebase",
          "../../context/AuthContext",
          "../../types/ticket",
          "../../context/AccountContext"
        ],
        "exports": [],
        "language": "tsx",
        "size": 4702
      },
      "src/components/Tickets/TicketList.tsx": {
        "description": "Displays a list of tickets, allows filtering, searching, and pagination. Integrates with Auth and Account contexts, and uses a TicketModal for viewing and creating tickets.  Subscribes to real-time user updates for displaying assignee names.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "@mui/material",
          "../../types/ticket",
          "../../context/AuthContext",
          "../../context/AccountContext",
          "lucide-react",
          "./TicketModal",
          "../../styles",
          "../../hooks/useTickets",
          "../../types/user",
          "../../services/chat"
        ],
        "lastAnalyzed": "2025-02-15T16:36:38",
        "functions": [
          {
            "dependencies": [],
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "returns": "Formatted date string or '-' if timestamp is undefined.",
            "purpose": "Formats a timestamp to a locale date string.",
            "name": "formatDate",
            "params": [
              "timestamp"
            ]
          },
          {
            "name": "TicketList",
            "purpose": "Renders a list of tickets, handles filtering, searching, and pagination.",
            "stateInteractions": {
              "reads": [
                "tickets",
                "selectedTicket",
                "isCreateModalOpen",
                "page",
                "rowsPerPage",
                "searchTerm",
                "filterStatus",
                "user",
                "currentAccount",
                "users"
              ],
              "writes": [
                "tickets",
                "selectedTicket",
                "isCreateModalOpen",
                "page",
                "rowsPerPage",
                "searchTerm",
                "filterStatus",
                "users"
              ]
            },
            "params": [
              {
                "optional": true,
                "name": "showHeader",
                "type": "boolean"
              }
            ],
            "dependencies": [
              "useTickets",
              "useAuth",
              "useAccount",
              "TicketModal",
              "useState",
              "useEffect"
            ],
            "returns": "JSX for the ticket list component."
          },
          {
            "name": "getAssigneeName",
            "dependencies": [
              "users"
            ],
            "returns": "Assignee's display name, 'Unassigned', 'Loading...', or 'Unknown User'.",
            "purpose": "Retrieves the display name of the assignee based on their ID.",
            "params": [
              "assigneeId"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": [
                "users"
              ]
            }
          },
          {
            "returns": "Object with status groups.",
            "name": "getStatusGroups",
            "dependencies": [],
            "params": [],
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "purpose": "Returns an object that groups ticket statuses for the status filter dropdown."
          },
          {
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "name": "getPriorityStyles",
            "returns": "CSS style string based on the provided priority.",
            "purpose": "Returns CSS styles for ticket priority.",
            "dependencies": [],
            "params": [
              "priority"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "@mui/material",
          "../../types/ticket",
          "../../context/AuthContext",
          "../../context/AccountContext",
          "lucide-react",
          "./TicketModal",
          "../../styles",
          "../../hooks/useTickets",
          "../../types/user",
          "../../services/chat"
        ],
        "exports": [
          "TicketList"
        ],
        "language": "tsx",
        "size": 13734
      },
      "src/components/Tickets/TicketModal.tsx": {
        "description": "A modal component for creating and editing tickets. It uses Firebase for data storage and integrates with the application's authentication and account contexts. Supports markdown rendering in the description field and allows assigning tickets to users within the account.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "firebase/firestore",
          "../../services/firebase",
          "../../types/ticket",
          "../../types/user",
          "../../context/AuthContext",
          "../../styles",
          "lucide-react",
          "react-responsive-modal",
          "react-markdown",
          "react-syntax-highlighter",
          "react-syntax-highlighter/dist/esm/styles/prism",
          "react-markdown",
          "../../context/AccountContext",
          "../../hooks/useTickets",
          "../../types/board"
        ],
        "lastAnalyzed": "2025-02-15T16:14:45",
        "functions": [
          {
            "name": "getUserName",
            "purpose": "Returns the display name or email of a user given their ID.",
            "returns": "string",
            "stateInteractions": {
              "writes": [],
              "reads": [
                "users"
              ]
            },
            "params": [
              "userId: string"
            ],
            "dependencies": [
              "users"
            ]
          },
          {
            "purpose": "Generates the next sequential ticket number with a 'Q-' prefix based on existing tickets in the account. Queries Firestore to get the highest existing number, increments it, and formats the new number with padding.",
            "dependencies": [
              "currentAccount",
              "db"
            ],
            "returns": "Promise<string>",
            "params": [],
            "name": "getNextTicketNumber",
            "stateInteractions": {
              "reads": [
                "currentAccount"
              ],
              "writes": []
            }
          },
          {
            "purpose": "Handles form submission. Creates a new ticket or updates an existing one in Firestore based on whether a ticket prop is provided. Performs authorization checks before saving.",
            "dependencies": [
              "user",
              "currentAccount",
              "isAuthorized",
              "createTicket",
              "updateTicket",
              "getNextTicketNumber",
              "ticket",
              "title",
              "description",
              "status",
              "priority",
              "assigneeId",
              "ticketType",
              "onSave",
              "onClose"
            ],
            "returns": "Promise<void>",
            "name": "handleSubmit",
            "params": [
              "e: React.FormEvent<HTMLFormElement>"
            ],
            "stateInteractions": {
              "reads": [
                "user",
                "currentAccount",
                "ticket",
                "title",
                "description",
                "status",
                "priority",
                "assigneeId",
                "ticketType",
                "isAuthorized"
              ],
              "writes": [
                "loading",
                "error"
              ]
            }
          },
          {
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "params": [],
            "dependencies": [
              "textareaRef"
            ],
            "returns": "void",
            "purpose": "Dynamically adjusts the height of the description textarea to fit its content.",
            "name": "adjustTextareaHeight"
          },
          {
            "dependencies": [
              "adjustTextareaHeight",
              "textareaRef"
            ],
            "purpose": "Enables edit mode for the description and focuses the textarea, then adjusts its height.",
            "returns": "void",
            "params": [],
            "stateInteractions": {
              "writes": [
                "isEditing"
              ],
              "reads": []
            },
            "name": "handlePreviewClick"
          },
          {
            "dependencies": [
              "adjustTextareaHeight"
            ],
            "name": "handleDescriptionChange",
            "params": [
              "e: React.ChangeEvent<HTMLTextAreaElement>"
            ],
            "purpose": "Updates the description state and adjusts textarea height.",
            "returns": "void",
            "stateInteractions": {
              "reads": [],
              "writes": [
                "description"
              ]
            }
          },
          {
            "purpose": "Disables edit mode for the description.",
            "stateInteractions": {
              "reads": [],
              "writes": [
                "isEditing"
              ]
            },
            "returns": "void",
            "name": "handleEditBlur",
            "params": []
          },
          {
            "returns": "void",
            "name": "handleKeyDown",
            "dependencies": [
              "textareaRef"
            ],
            "purpose": "Handles specific key presses within the description textarea, inserting closing backticks for code blocks when Enter is pressed after opening backticks.",
            "stateInteractions": {
              "reads": [
                "description"
              ],
              "writes": [
                "description"
              ]
            },
            "params": [
              "e: React.KeyboardEvent<HTMLTextAreaElement>"
            ]
          },
          {
            "name": "CopyButton",
            "dependencies": [],
            "params": [
              {
                "text": "string"
              }
            ],
            "returns": "JSX.Element",
            "stateInteractions": {
              "writes": [
                "copied"
              ],
              "reads": [
                "copied"
              ]
            },
            "purpose": "A functional component that provides a copy button for code blocks. It copies the provided text to the clipboard and displays a checkmark to indicate success."
          },
          {
            "params": [
              {
                "text": "string"
              }
            ],
            "dependencies": [
              "ReactMarkdown",
              "SyntaxHighlighter",
              "tomorrow",
              "CopyButton"
            ],
            "name": "DescriptionPreview",
            "returns": "JSX.Element",
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "purpose": "Renders the description preview with markdown and syntax highlighting support, including clickable links and copy buttons for code."
          },
          {
            "dependencies": [
              "ticket",
              "deleteTicket",
              "onSave",
              "onClose"
            ],
            "purpose": "Deletes the current ticket from Firestore and closes the modal. Performs loading state management and error handling.",
            "stateInteractions": {
              "writes": [
                "loading",
                "error"
              ],
              "reads": [
                "ticket"
              ]
            },
            "params": [],
            "name": "handleDelete",
            "returns": "Promise<void>"
          },
          {
            "params": [],
            "returns": "JSX.Element",
            "name": "DeleteConfirmation",
            "purpose": "A functional component that renders a confirmation modal for deleting a ticket.",
            "dependencies": [
              "Modal",
              "isDeleteConfirmOpen",
              "handleDelete",
              "ticket",
              "loading"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": [
                "isDeleteConfirmOpen",
                "ticket",
                "loading"
              ]
            }
          }
        ],
        "classes": [],
        "imports": [
          "firebase/firestore",
          "../../services/firebase",
          "../../types/ticket",
          "../../types/user",
          "../../context/AuthContext",
          "../../styles",
          "lucide-react",
          "react-responsive-modal",
          "react-markdown",
          "react-syntax-highlighter",
          "react-syntax-highlighter/dist/esm/styles/prism",
          "react-markdown",
          "../../context/AccountContext",
          "../../hooks/useTickets",
          "../../types/board"
        ],
        "exports": [],
        "language": "tsx",
        "size": 24891
      },
      "src/components/Tickets/TicketViewSwitch.tsx": {
        "description": "A simple component that provides a visual switch between two views: 'list' and 'board'.  Manages its own view state locally via prop drilling and callbacks.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "react",
          "lucide-react"
        ],
        "lastAnalyzed": "2025-02-08T08:32:28",
        "functions": [
          {
            "dependencies": [
              "view prop",
              "onViewChange prop"
            ],
            "params": [
              "view",
              "onViewChange"
            ],
            "purpose": "Renders two buttons that allow the user to switch between a list and board view.",
            "stateInteractions": {
              "writes": [],
              "reads": [
                "view"
              ]
            },
            "name": "TicketViewSwitch",
            "returns": "JSX element representing the view switch"
          }
        ],
        "classes": [],
        "imports": [
          "react",
          "lucide-react"
        ],
        "exports": [],
        "language": "tsx",
        "size": 1104
      },
      "src/components/Tickets/TicketsContainer.tsx": {
        "description": "This component displays a list of tickets, offering both list and board views. The user can switch between these views using buttons. The component manages the current view state internally.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "./TicketList",
          "./TicketBoard",
          "./TicketViewSwitch",
          "react-router-dom",
          "lucide-react"
        ],
        "lastAnalyzed": "2025-02-08T11:51:36",
        "functions": [
          {
            "params": [],
            "stateInteractions": {
              "writes": [
                "view"
              ],
              "reads": [
                "view"
              ]
            },
            "purpose": "Renders a container for displaying tickets in either list or board view.",
            "name": "TicketsContainer",
            "dependencies": [
              "useState",
              "TicketList",
              "TicketBoard"
            ],
            "returns": "JSX.Element representing the ticket container"
          }
        ],
        "classes": [],
        "imports": [
          "./TicketList",
          "./TicketBoard",
          "./TicketViewSwitch",
          "react-router-dom",
          "lucide-react"
        ],
        "exports": [
          "TicketsContainer"
        ],
        "language": "tsx",
        "size": 1519
      },
      "src/components/Tickets/index.ts": {
        "description": "Provides a set of reusable components related to ticket management: listing, creating, editing, and visualizing on a board.",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-08T11:51:36",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "ts",
        "size": 217
      },
      "src/components/ui/avatar.tsx": {
        "description": "Provides a React Avatar component with image and fallback rendering using Radix UI's Avatar primitives.  Forwards refs to the underlying Radix components for maximum flexibility.  Includes styling for a circular avatar with a muted background for the fallback.",
        "features": [
          "external dependencies",
          "class definitions"
        ],
        "dependencies": [
          "react",
          "@radix-ui/react-avatar"
        ],
        "lastAnalyzed": "2025-01-13T00:01:09",
        "functions": [],
        "classes": [
          {
            "properties": [
              "className",
              "...props"
            ],
            "name": "Avatar",
            "dependencies": [
              "@radix-ui/react-avatar"
            ],
            "purpose": "Renders the root Avatar component. Forwards ref and props to the underlying Radix UI Avatar component.  Provides default styling for a circular avatar.",
            "methods": []
          },
          {
            "properties": [
              "className",
              "...props"
            ],
            "dependencies": [
              "@radix-ui/react-avatar"
            ],
            "methods": [],
            "name": "AvatarImage",
            "purpose": "Renders the image within the Avatar. Forwards ref and props to the underlying Radix UI Avatar Image component. Provides default styling to fill the avatar space."
          },
          {
            "name": "AvatarFallback",
            "properties": [
              "className",
              "...props"
            ],
            "dependencies": [
              "@radix-ui/react-avatar"
            ],
            "methods": [],
            "purpose": "Renders the fallback UI when no image is available. Forwards ref and props to the underlying Radix UI Avatar Fallback component.  Provides default styling with a muted background and centered content."
          }
        ],
        "imports": [
          "react",
          "@radix-ui/react-avatar"
        ],
        "exports": [],
        "language": "tsx",
        "size": 1388
      },
      "src/components/ui/button.tsx": {
        "description": "A React button component with styling and variant support using class-variance-authority.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "react",
          "class-variance-authority"
        ],
        "lastAnalyzed": "2025-01-13T00:01:09",
        "functions": [
          {
            "stateInteractions": {
              "writes": [],
              "reads": [
                "className",
                "variant",
                "size",
                "props"
              ]
            },
            "returns": "JSX.Element representing the button",
            "name": "Button",
            "purpose": "Renders a button element with various styles and sizes.",
            "dependencies": [
              "buttonVariants",
              "React.forwardRef"
            ],
            "params": [
              "className",
              "variant",
              "size",
              "...props"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "react",
          "class-variance-authority"
        ],
        "exports": [],
        "language": "tsx",
        "size": 1612
      },
      "src/components/ui/command.tsx": {
        "description": "This code exports styled React components for a command palette UI, wrapping the `cmdk` library's primitives. It provides styled versions of the main command container, input field, list container, and individual list items.",
        "features": [
          "external dependencies"
        ],
        "dependencies": [
          "react",
          "cmdk"
        ],
        "lastAnalyzed": "2025-01-13T00:01:09",
        "functions": [],
        "classes": [],
        "imports": [
          "react",
          "cmdk"
        ],
        "exports": [],
        "language": "tsx",
        "size": 1948
      },
      "src/components/ui/dialog.tsx": {
        "description": "Provides a reusable Dialog component based on Radix UI, with animations and styling for open/close transitions.",
        "features": [
          "external dependencies",
          "class definitions"
        ],
        "dependencies": [
          "react",
          "@radix-ui/react-dialog"
        ],
        "lastAnalyzed": "2025-01-13T00:01:09",
        "functions": [],
        "classes": [
          {
            "name": "Dialog",
            "properties": [],
            "purpose": "The root container for the dialog.",
            "dependencies": [
              "@radix-ui/react-dialog"
            ],
            "methods": []
          },
          {
            "purpose": "The component that triggers the dialog to open.",
            "name": "DialogTrigger",
            "methods": [],
            "properties": [],
            "dependencies": [
              "@radix-ui/react-dialog"
            ]
          },
          {
            "purpose": "The content container of the dialog, including overlay and animations.",
            "name": "DialogContent",
            "methods": [],
            "properties": [],
            "dependencies": [
              "@radix-ui/react-dialog",
              "react"
            ]
          },
          {
            "methods": [],
            "name": "DialogHeader",
            "properties": [],
            "purpose": "A wrapper for the dialog header content.",
            "dependencies": [
              "react"
            ]
          },
          {
            "name": "DialogTitle",
            "dependencies": [
              "@radix-ui/react-dialog",
              "react"
            ],
            "methods": [],
            "purpose": "The title element of the dialog.",
            "properties": []
          }
        ],
        "imports": [
          "react",
          "@radix-ui/react-dialog"
        ],
        "exports": [],
        "language": "tsx",
        "size": 2037
      },
      "src/components/ui/dropdown-menu.tsx": {
        "description": "Provides a dropdown menu component using Radix UI's `react-dropdown-menu` library. It exports four components: `DropdownMenu`, `DropdownMenuTrigger`, `DropdownMenuContent`, and `DropdownMenuItem`. The `DropdownMenuContent` component includes styling and animation configurations.",
        "features": [
          "external dependencies"
        ],
        "dependencies": [
          "react",
          "@radix-ui/react-dropdown-menu"
        ],
        "lastAnalyzed": "2025-01-13T00:01:09",
        "functions": [],
        "classes": [],
        "imports": [
          "react",
          "@radix-ui/react-dropdown-menu"
        ],
        "exports": [],
        "language": "tsx",
        "size": 1565
      },
      "src/components/ui/input.tsx": {
        "description": "A reusable input component built with React. It forwards refs and accepts custom styling through the `className` prop. Primarily utilizes built-in HTML input attributes and enhances them with Tailwind CSS for styling.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "react"
        ],
        "lastAnalyzed": "2025-01-13T00:01:09",
        "functions": [
          {
            "returns": "JSX.Element representing the styled input element",
            "name": "Input",
            "dependencies": [
              "React.forwardRef"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": [
                "className",
                "type",
                "props",
                "ref"
              ]
            },
            "params": [
              "className",
              "type",
              "...props",
              "ref"
            ],
            "purpose": "Renders an HTML input element with pre-defined Tailwind CSS styling and allows for customization through props."
          }
        ],
        "classes": [],
        "imports": [
          "react"
        ],
        "exports": [],
        "language": "tsx",
        "size": 702
      },
      "src/components/ui/popover.tsx": {
        "description": "Provides a reusable Popover component based on Radix UI's Popover primitive.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "react",
          "@radix-ui/react-popover"
        ],
        "lastAnalyzed": "2025-01-13T00:01:09",
        "functions": [
          {
            "name": "",
            "dependencies": [
              "@radix-ui/react-popover",
              "react"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "purpose": "Wraps `PopoverPrimitive.Content` to customize styling, animation, and default prop values.",
            "returns": "A customized Popover content element.",
            "params": [
              "{ className, align = \"center\", sideOffset = 4, ...props }",
              "ref"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "react",
          "@radix-ui/react-popover"
        ],
        "exports": [],
        "language": "tsx",
        "size": 914
      },
      "src/components/ui/scroll-area.tsx": {
        "description": "This component provides a styled scroll area using Radix UI's `ScrollArea` primitive. It forwards refs and props to the underlying Radix component, adding default styling for overflow, viewport, scrollbars, and corner.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "react",
          "@radix-ui/react-scroll-area"
        ],
        "lastAnalyzed": "2025-01-13T00:01:09",
        "functions": [
          {
            "purpose": "Wraps the Radix UI ScrollArea component with default styling and prop forwarding.",
            "params": [
              "className",
              "children",
              "...props",
              "ref"
            ],
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "dependencies": [
              "@radix-ui/react-scroll-area"
            ],
            "name": "ScrollArea",
            "returns": "A React element representing the styled scroll area."
          }
        ],
        "classes": [],
        "imports": [
          "react",
          "@radix-ui/react-scroll-area"
        ],
        "exports": [],
        "language": "tsx",
        "size": 1208
      },
      "src/components/ui/textarea.tsx": {
        "description": "A simple wrapper component for the HTML textarea element, enhancing it with styling and accessibility features.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "react"
        ],
        "lastAnalyzed": "2025-01-13T00:01:09",
        "functions": [
          {
            "dependencies": [
              "React.forwardRef"
            ],
            "name": "",
            "purpose": "Functional component that renders a styled textarea.",
            "returns": "JSX.Element representing the enhanced textarea",
            "params": [
              "{ className, ...props }: TextareaProps",
              "ref: React.Ref<HTMLTextAreaElement>"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": [
                "className",
                "props"
              ]
            }
          }
        ],
        "classes": [],
        "imports": [
          "react"
        ],
        "exports": [],
        "language": "tsx",
        "size": 691
      },
      "src/components/ui/tooltip.tsx": {
        "description": "Provides a tooltip component based on Radix UI's `react-tooltip` library.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "react",
          "@radix-ui/react-tooltip"
        ],
        "lastAnalyzed": "2025-01-13T00:01:09",
        "functions": [
          {
            "name": "TooltipContent",
            "returns": "React.ElementRef<typeof TooltipPrimitive.Content>",
            "stateInteractions": {
              "reads": [
                "tooltip state (open/closed)",
                "side"
              ],
              "writes": []
            },
            "purpose": "Renders the content of the tooltip with styling and animations.",
            "params": [
              "className",
              "sideOffset",
              "...props"
            ],
            "dependencies": [
              "@radix-ui/react-tooltip"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "react",
          "@radix-ui/react-tooltip"
        ],
        "exports": [],
        "language": "tsx",
        "size": 1076
      },
      "src/config/firebase.ts": {
        "description": "Initializes and exports Firebase services (Firestore, Functions, Auth, and Realtime Database) using environment variables for configuration.",
        "features": [
          "external dependencies",
          "exports"
        ],
        "dependencies": [
          "firebase/app",
          "firebase/firestore",
          "firebase/functions",
          "firebase/auth",
          "firebase/database"
        ],
        "lastAnalyzed": "2025-02-17T20:48:14",
        "functions": [],
        "classes": [],
        "imports": [
          "firebase/app",
          "firebase/firestore",
          "firebase/functions",
          "firebase/auth",
          "firebase/database"
        ],
        "exports": [
          "app",
          "db",
          "auth",
          "functions",
          "database"
        ],
        "language": "ts",
        "size": 1005
      },
      "src/context/AccountContext.tsx": {
        "description": "Provides access to user account data and settings using Firebase Firestore. Manages loading state and errors. Allows updating account settings.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "./AuthContext",
          "../services/firebase",
          "firebase/firestore"
        ],
        "lastAnalyzed": "2025-02-12T06:04:35",
        "functions": [
          {
            "returns": "React context provider component.",
            "dependencies": [
              "useAuth",
              "useState",
              "useEffect",
              "db",
              "onSnapshot",
              "setDoc"
            ],
            "purpose": "Provides the account context and manages the account data fetching and updates.",
            "params": [
              "{ children }"
            ],
            "stateInteractions": {
              "writes": [
                "currentAccount",
                "accounts",
                "isLoading",
                "error"
              ],
              "reads": [
                "user",
                "currentAccount"
              ]
            },
            "name": "AccountProvider"
          },
          {
            "purpose": "Custom hook to access the account context.",
            "params": [],
            "stateInteractions": {
              "writes": [],
              "reads": [
                "AccountContext"
              ]
            },
            "dependencies": [
              "useContext",
              "AccountContext"
            ],
            "returns": "Account context value.",
            "name": "useAccount"
          }
        ],
        "classes": [],
        "imports": [
          "./AuthContext",
          "../services/firebase",
          "firebase/firestore"
        ],
        "exports": [
          "AccountProvider",
          "useAccount"
        ],
        "language": "tsx",
        "size": 2862
      },
      "src/context/AuthContext.tsx": {
        "description": "Provides authentication context and related functions using Firebase. Manages user login/logout, registration, and Google sign-in. Also handles a dark mode toggle.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "firebase/auth",
          "firebase/firestore",
          "firebase/database",
          "../services/firebase",
          "../services/auth",
          "../types/user"
        ],
        "lastAnalyzed": "2025-02-16T19:50:50",
        "functions": [
          {
            "purpose": "Saves user data to both Firestore and Realtime Database after login/registration.",
            "params": [
              "user"
            ],
            "name": "saveUserToDatabase",
            "dependencies": [
              "db",
              "database"
            ],
            "returns": "Promise<void>",
            "stateInteractions": {
              "writes": [],
              "reads": [
                "user"
              ]
            }
          },
          {
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "dependencies": [
              "signInWithEmailAndPassword",
              "saveUserToDatabase",
              "auth"
            ],
            "name": "login",
            "purpose": "Signs in a user with email and password.",
            "params": [
              "email",
              "password"
            ],
            "returns": "Promise<UserCredential>"
          },
          {
            "dependencies": [
              "createUserWithEmailAndPassword",
              "saveUserToDatabase",
              "auth"
            ],
            "name": "register",
            "purpose": "Registers a new user with email and password.",
            "returns": "Promise<UserCredential>",
            "params": [
              "email",
              "password"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": []
            }
          },
          {
            "returns": "Promise<void>",
            "dependencies": [
              "signOut",
              "auth"
            ],
            "purpose": "Signs out the current user.",
            "name": "logout",
            "params": [],
            "stateInteractions": {
              "reads": [],
              "writes": []
            }
          },
          {
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "purpose": "Signs in a user with Google.",
            "dependencies": [
              "signInWithPopup",
              "saveUserToDatabase",
              "auth",
              "GoogleAuthProvider"
            ],
            "returns": "Promise<UserCredential>",
            "params": [],
            "name": "googleSignIn"
          },
          {
            "purpose": "Toggles the dark mode state.",
            "stateInteractions": {
              "writes": [
                "isDarkMode"
              ],
              "reads": [
                "isDarkMode"
              ]
            },
            "params": [],
            "returns": "void",
            "name": "toggleDarkMode",
            "dependencies": [
              "setIsDarkMode"
            ]
          },
          {
            "dependencies": [
              "useContext",
              "AuthContext"
            ],
            "purpose": "Custom hook to access the AuthContext.",
            "returns": "AuthContextProps",
            "params": [],
            "name": "useAuth",
            "stateInteractions": {
              "writes": [],
              "reads": []
            }
          }
        ],
        "classes": [],
        "imports": [
          "firebase/auth",
          "firebase/firestore",
          "firebase/database",
          "../services/firebase",
          "../services/auth",
          "../types/user"
        ],
        "exports": [
          "AuthProvider",
          "useAuth"
        ],
        "language": "tsx",
        "size": 3932
      },
      "src/context/CodebaseContext.tsx": {
        "description": "Provides a React context for managing the currently selected repository within a codebase analysis application.",
        "features": [
          "function definitions",
          "exports"
        ],
        "dependencies": [],
        "lastAnalyzed": "2025-02-11T23:04:00",
        "functions": [
          {
            "name": "CodebaseProvider",
            "params": [
              "{ children }"
            ],
            "purpose": "Provides the selected repository state and update function to its children via the CodebaseContext.",
            "returns": "React.ReactNode",
            "stateInteractions": {
              "writes": [
                "selectedRepository"
              ],
              "reads": []
            },
            "dependencies": [
              "useState",
              "CodebaseContext"
            ]
          },
          {
            "purpose": "Custom hook to access the CodebaseContext values.",
            "returns": "CodebaseContextType",
            "name": "useCodebase",
            "params": [],
            "dependencies": [
              "useContext",
              "CodebaseContext"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": [
                "selectedRepository"
              ]
            }
          }
        ],
        "classes": [],
        "imports": [],
        "exports": [
          "CodebaseProvider",
          "useCodebase"
        ],
        "language": "tsx",
        "size": 808
      },
      "src/hooks/useTickets.ts": {
        "description": "This hook provides functionality for managing tickets stored in Firestore. It offers methods for creating, reading, updating, and deleting tickets, as well as generating missing ticket IDs. It uses the current account ID from the `AccountContext` to associate tickets with users.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "firebase/firestore",
          "../services/firebase",
          "../types/ticket",
          "react",
          "../context/AccountContext"
        ],
        "lastAnalyzed": "2025-02-17T08:22:16",
        "functions": [
          {
            "name": "getNextTicketNumber",
            "purpose": "Retrieves the next available ticket number by querying for the highest existing ticket ID and incrementing it.",
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "params": [],
            "returns": "The next ticket number as an integer.",
            "dependencies": [
              "firebase/firestore"
            ]
          },
          {
            "dependencies": [
              "firebase/firestore",
              "currentAccount"
            ],
            "params": [
              "ticketId: string",
              "updates: Partial<Omit<Ticket, 'id' | 'accountId'>>"
            ],
            "purpose": "Updates a specific ticket in Firestore with provided changes.",
            "stateInteractions": {
              "writes": [],
              "reads": [
                "currentAccount"
              ]
            },
            "returns": "Void",
            "name": "updateTicket"
          },
          {
            "params": [],
            "dependencies": [
              "firebase/firestore",
              "getNextTicketNumber",
              "setCachedTickets"
            ],
            "returns": "The number of updated tickets.",
            "purpose": "Generates and assigns ticket IDs to tickets lacking them.",
            "name": "generateMissingTicketIds",
            "stateInteractions": {
              "reads": [],
              "writes": [
                "cachedTickets"
              ]
            }
          },
          {
            "dependencies": [
              "firebase/firestore",
              "currentAccount"
            ],
            "params": [],
            "name": "getTickets",
            "purpose": "Fetches all tickets associated with the current account from Firestore.",
            "stateInteractions": {
              "reads": [
                "currentAccount"
              ],
              "writes": []
            },
            "returns": "An array of Ticket objects."
          },
          {
            "dependencies": [
              "firebase/firestore",
              "currentAccount"
            ],
            "stateInteractions": {
              "reads": [
                "currentAccount"
              ],
              "writes": []
            },
            "name": "createTicket",
            "purpose": "Creates a new ticket in Firestore for the current account.",
            "returns": "The newly created Ticket object, or null if creation fails.",
            "params": [
              "ticketData: Omit<Ticket, 'id' | 'accountId'>"
            ]
          },
          {
            "returns": "true if successful, throws an error otherwise.",
            "purpose": "Deletes a ticket from Firestore.",
            "name": "deleteTicket",
            "stateInteractions": {
              "writes": [],
              "reads": [
                "currentAccount"
              ]
            },
            "params": [
              "ticketId: string"
            ],
            "dependencies": [
              "firebase/firestore",
              "currentAccount"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "firebase/firestore",
          "../services/firebase",
          "../types/ticket",
          "react",
          "../context/AccountContext"
        ],
        "exports": [
          "useTickets"
        ],
        "language": "ts",
        "size": 4910
      },
      "src/index.css": {
        "description": "index.css file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2024-10-19T20:51:47",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "css",
        "size": 58
      },
      "src/index.tsx": {
        "description": "This code sets up the main entry point for a React application. It renders the root App component into the 'root' HTML element and initializes performance reporting.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "react",
          "react-dom/client",
          "./App",
          "./reportWebVitals"
        ],
        "lastAnalyzed": "2024-10-19T20:51:47",
        "functions": [
          {
            "returns": "void",
            "name": "reportWebVitals",
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "purpose": "Logs performance metrics.",
            "params": [],
            "dependencies": []
          }
        ],
        "classes": [],
        "imports": [
          "react",
          "react-dom/client",
          "./App",
          "./reportWebVitals"
        ],
        "exports": [],
        "language": "tsx",
        "size": 297
      },
      "src/logo.svg": {
        "description": "logo.svg file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2024-10-19T20:51:47",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "svg",
        "size": 2632
      },
      "src/migrations/index.ts": {
        "description": "Provides a framework for running database migrations related to tickets, currently supporting adding an account ID.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "./tickets/add-account-id"
        ],
        "lastAnalyzed": "2025-02-12T06:04:35",
        "functions": [
          {
            "name": "runMigration",
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "purpose": "Executes a specified database migration.",
            "dependencies": [
              "migrations.tickets"
            ],
            "returns": "A MigrationResult object indicating success or failure, with optional details.",
            "params": [
              "migrationName: keyof typeof migrations.tickets"
            ]
          },
          {
            "name": "migrateTicketsAddAccountId",
            "purpose": "Performs the actual database migration of adding account IDs to tickets (imported, implementation not shown in this file).",
            "dependencies": [],
            "returns": "A MigrationResult object.",
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "params": []
          }
        ],
        "classes": [],
        "imports": [
          "./tickets/add-account-id"
        ],
        "exports": [
          "migrations"
        ],
        "language": "ts",
        "size": 925
      },
      "src/migrations/tickets/add-account-id.ts": {
        "description": "This code implements two Firebase Firestore migration functions: `migrateTicketsAddAccountId` adds a default `accountId` to existing ticket documents that lack it, and `verifyTicketMigration` checks the results of this migration.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "firebase/firestore",
          "../../config/firebase"
        ],
        "lastAnalyzed": "2025-02-12T06:04:35",
        "functions": [
          {
            "params": [],
            "name": "migrateTicketsAddAccountId",
            "returns": "An object indicating success or failure, including the number of migrated tickets and an error message if applicable.",
            "dependencies": [
              "firebase/firestore",
              "../../config/firebase"
            ],
            "stateInteractions": {
              "writes": [
                "tickets collection (accountId, updatedAt fields)"
              ],
              "reads": [
                "tickets collection"
              ]
            },
            "purpose": "Adds a default `accountId` to all ticket documents missing this field."
          },
          {
            "params": [],
            "stateInteractions": {
              "writes": [],
              "reads": [
                "tickets collection"
              ]
            },
            "returns": "An object containing verification results, including success status, a count of tickets per account ID, and a list of ticket IDs without an account ID.",
            "purpose": "Verifies the migration by checking if any tickets still lack an `accountId` and provides statistics on the distribution of account IDs.",
            "dependencies": [
              "firebase/firestore",
              "../../config/firebase"
            ],
            "name": "verifyTicketMigration"
          }
        ],
        "classes": [],
        "imports": [
          "firebase/firestore",
          "../../config/firebase"
        ],
        "exports": [],
        "language": "ts",
        "size": 2704
      },
      "src/pages/InvitationPage.tsx": {
        "description": "This component handles accepting user invitations. It uses a Firebase callable function to process the acceptance and redirects the user to the dashboard upon success.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "react",
          "react-router-dom",
          "firebase/functions",
          "../context/AuthContext"
        ],
        "lastAnalyzed": "2025-02-15T13:25:30",
        "functions": [
          {
            "purpose": "Calls a Firebase function to accept the invitation and redirects to the dashboard on success.",
            "name": "handleAcceptInvitation",
            "returns": "void",
            "dependencies": [
              "user",
              "invitationId",
              "navigate",
              "setIsProcessing",
              "setError",
              "getFunctions",
              "httpsCallable"
            ],
            "params": [],
            "stateInteractions": {
              "writes": [
                "isProcessing",
                "error"
              ],
              "reads": [
                "user",
                "invitationId",
                "error"
              ]
            }
          }
        ],
        "classes": [],
        "imports": [
          "react",
          "react-router-dom",
          "firebase/functions",
          "../context/AuthContext"
        ],
        "exports": [],
        "language": "tsx",
        "size": 2084
      },
      "src/pages/LoginPage.tsx": {
        "description": "This component renders a login form and redirects the user to the home page upon successful login.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "react",
          "react-router-dom",
          "../components/Auth/Login"
        ],
        "lastAnalyzed": "2024-10-19T20:51:47",
        "functions": [
          {
            "returns": "React component",
            "dependencies": [
              "useNavigate",
              "Login"
            ],
            "name": "LoginPage",
            "params": [],
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "purpose": "Renders the login page and handles navigation after successful login."
          },
          {
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "params": [],
            "name": "onLoginSuccess",
            "returns": "void",
            "dependencies": [
              "navigate"
            ],
            "purpose": "Navigates to the home page after successful login."
          }
        ],
        "classes": [],
        "imports": [
          "react",
          "react-router-dom",
          "../components/Auth/Login"
        ],
        "exports": [],
        "language": "tsx",
        "size": 328
      },
      "src/pages/RegisterPage.tsx": {
        "description": "A simple page component that renders the Register component for user registration.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "react",
          "../components/Auth/Register"
        ],
        "lastAnalyzed": "2024-10-19T20:51:47",
        "functions": [
          {
            "name": "RegisterPage",
            "params": [],
            "returns": "JSX.Element representing the Register component",
            "purpose": "Renders the Register component.",
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "dependencies": [
              "Register component"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "react",
          "../components/Auth/Register"
        ],
        "exports": [],
        "language": "tsx",
        "size": 175
      },
      "src/react-app-env.d.ts": {
        "description": "This file declares the TypeScript types for the React application environment, primarily extending the default types provided by react-scripts.",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2024-10-19T20:51:47",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "ts",
        "size": 40
      },
      "src/reportWebVitals.ts": {
        "description": "This code defines a function `reportWebVitals` that conditionally measures web vitals and reports them using a provided callback function. It uses dynamic import to load the `web-vitals` library only if a valid callback is given.",
        "features": [
          "external dependencies",
          "function definitions"
        ],
        "dependencies": [
          "web-vitals"
        ],
        "lastAnalyzed": "2024-10-19T20:51:47",
        "functions": [
          {
            "returns": "void",
            "name": "reportWebVitals",
            "params": [
              "onPerfEntry?: ReportHandler"
            ],
            "dependencies": [
              "web-vitals"
            ],
            "purpose": "Measures and reports web vitals metrics (CLS, FID, FCP, LCP, TTFB).",
            "stateInteractions": {
              "reads": [],
              "writes": []
            }
          }
        ],
        "classes": [],
        "imports": [
          "web-vitals"
        ],
        "exports": [],
        "language": "ts",
        "size": 425
      },
      "src/routes/settings.tsx": {
        "description": "Defines routes for the settings section of the application, including GitHub settings and user management.",
        "features": [
          "external dependencies",
          "exports"
        ],
        "dependencies": [
          "react-router-dom",
          "../components/Settings"
        ],
        "lastAnalyzed": "2025-02-12T06:04:35",
        "functions": [],
        "classes": [],
        "imports": [
          "react-router-dom",
          "../components/Settings"
        ],
        "exports": [
          "settingsRoutes"
        ],
        "language": "tsx",
        "size": 532
      },
      "src/services/api.ts": {
        "description": "Provides API service to synchronize repositories. Uses fetch to make POST requests to an external API based on environment variables or a default local URL.",
        "features": [
          "function definitions",
          "exports"
        ],
        "dependencies": [],
        "lastAnalyzed": "2025-02-16T19:50:50",
        "functions": [
          {
            "params": [
              "repositoryName: string",
              "userId: string",
              "accountId: string"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "returns": "JSON response from the API upon successful sync",
            "purpose": "Synchronizes a repository by sending a POST request to the backend API.",
            "dependencies": [
              "fetch",
              "API_BASE_URL"
            ],
            "name": "syncRepository"
          }
        ],
        "classes": [],
        "imports": [],
        "exports": [
          "syncRepository"
        ],
        "language": "ts",
        "size": 546
      },
      "src/services/auth.ts": {
        "description": "This code provides authentication services using Firebase, including user registration, login, logout, and database interaction for user data persistence. It leverages Firebase Authentication and Realtime Database.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "./firebase",
          "firebase/auth",
          "firebase/database",
          "../types/user"
        ],
        "lastAnalyzed": "2025-01-05T21:54:46",
        "functions": [
          {
            "stateInteractions": {
              "writes": [
                "Firebase Authentication",
                "Firebase Realtime Database"
              ],
              "reads": []
            },
            "name": "registerUser",
            "returns": "The registered user object (CustomUser).",
            "params": [
              "email",
              "password"
            ],
            "dependencies": [
              "createUserWithEmailAndPassword",
              "saveUserToDatabase"
            ],
            "purpose": "Registers a new user with email and password."
          },
          {
            "name": "loginUser",
            "returns": "The logged-in user object (CustomUser).",
            "purpose": "Logs in an existing user with email and password.",
            "dependencies": [
              "signInWithEmailAndPassword",
              "saveUserToDatabase"
            ],
            "stateInteractions": {
              "reads": [],
              "writes": [
                "Firebase Authentication (updates logged in state)",
                "Firebase Realtime Database"
              ]
            },
            "params": [
              "email",
              "password"
            ]
          },
          {
            "dependencies": [
              "signOut"
            ],
            "returns": "void",
            "params": [],
            "purpose": "Logs out the current user.",
            "name": "logoutUser",
            "stateInteractions": {
              "writes": [
                "Firebase Authentication"
              ],
              "reads": []
            }
          },
          {
            "name": "saveUserToDatabase",
            "params": [
              "user"
            ],
            "stateInteractions": {
              "reads": [
                "user object"
              ],
              "writes": [
                "Firebase Realtime Database"
              ]
            },
            "purpose": "Saves user data to the Realtime Database.",
            "dependencies": [
              "ref",
              "set"
            ],
            "returns": "void"
          },
          {
            "stateInteractions": {
              "writes": [
                "Firebase Realtime Database"
              ],
              "reads": [
                "user object",
                "companyId"
              ]
            },
            "params": [
              "user",
              "companyId"
            ],
            "purpose": "Creates a new user record in the database.",
            "returns": "void",
            "name": "createUserRecord",
            "dependencies": [
              "ref",
              "set"
            ]
          },
          {
            "returns": "void",
            "params": [
              "email",
              "password",
              "companyId"
            ],
            "dependencies": [
              "createUserWithEmailAndPassword",
              "createUserRecord"
            ],
            "stateInteractions": {
              "writes": [
                "Firebase Authentication",
                "Firebase Realtime Database"
              ],
              "reads": [
                "email",
                "password",
                "companyId"
              ]
            },
            "purpose": "Signs up a new user with email, password and company ID.",
            "name": "signUp"
          },
          {
            "name": "login",
            "purpose": "Logs in an existing user with email, password and company ID.",
            "params": [
              "email",
              "password",
              "companyId"
            ],
            "stateInteractions": {
              "writes": [
                "Firebase Authentication",
                "Firebase Realtime Database"
              ],
              "reads": [
                "email",
                "password",
                "companyId"
              ]
            },
            "dependencies": [
              "signInWithEmailAndPassword",
              "createUserRecord"
            ],
            "returns": "void"
          }
        ],
        "classes": [],
        "imports": [
          "./firebase",
          "firebase/auth",
          "firebase/database",
          "../types/user"
        ],
        "exports": [
          "registerUser",
          "loginUser",
          "logoutUser",
          "createUserRecord",
          "signUp",
          "login"
        ],
        "language": "ts",
        "size": 2522
      },
      "src/services/chat.ts": {
        "description": "This code provides a set of services for real-time chat functionality using Firebase Firestore. It includes subscribing to users and messages, sending new messages, and updating/deleting existing messages.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "firebase/firestore",
          "../config/firebase",
          "../types/message",
          "../types/user",
          "../utils/dateUtils"
        ],
        "lastAnalyzed": "2025-02-19T18:46:04",
        "functions": [
          {
            "purpose": "Subscribes to changes in user data for a given account and member IDs.",
            "dependencies": [
              "firebase/firestore",
              "db",
              "CustomUser"
            ],
            "name": "subscribeToUsers",
            "stateInteractions": {
              "reads": [
                "users collection in Firestore"
              ],
              "writes": []
            },
            "params": [
              "accountId",
              "memberIds",
              "callback"
            ],
            "returns": "An unsubscribe function to stop the subscription."
          },
          {
            "params": [
              "channelId",
              "accountId",
              "callback"
            ],
            "purpose": "Subscribes to changes in messages for a given channel and account ID.",
            "returns": "An unsubscribe function to stop the subscription.",
            "stateInteractions": {
              "writes": [],
              "reads": [
                "messages collection in Firestore"
              ]
            },
            "dependencies": [
              "firebase/firestore",
              "db",
              "Message"
            ],
            "name": "subscribeToMessages"
          },
          {
            "dependencies": [
              "firebase/firestore",
              "db"
            ],
            "name": "sendMessage",
            "params": [
              "channelId",
              "message"
            ],
            "returns": "A Promise resolving after the message is sent.",
            "stateInteractions": {
              "reads": [],
              "writes": [
                "messages collection in Firestore"
              ]
            },
            "purpose": "Sends a new message to a specified channel."
          },
          {
            "purpose": "Updates an existing message with provided changes.",
            "name": "updateMessage",
            "dependencies": [
              "firebase/firestore",
              "db"
            ],
            "returns": "A Promise resolving after the message is updated.",
            "params": [
              "messageId",
              "updates"
            ],
            "stateInteractions": {
              "reads": [],
              "writes": [
                "messages collection in Firestore"
              ]
            }
          },
          {
            "name": "deleteMessage",
            "purpose": "Deletes a message by its ID.",
            "dependencies": [
              "firebase/firestore",
              "db"
            ],
            "params": [
              "messageId"
            ],
            "returns": "A Promise resolving after the message is deleted.",
            "stateInteractions": {
              "writes": [
                "messages collection in Firestore"
              ],
              "reads": []
            }
          }
        ],
        "classes": [],
        "imports": [
          "firebase/firestore",
          "../config/firebase",
          "../types/message",
          "../types/user",
          "../utils/dateUtils"
        ],
        "exports": [
          "subscribeToUsers",
          "subscribeToMessages",
          "sendMessage",
          "updateMessage",
          "deleteMessage"
        ],
        "language": "ts",
        "size": 3543
      },
      "src/services/email.ts": {
        "description": "Provides a service to send email invitations using a Firebase Cloud Function.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "firebase/functions",
          "../config/firebase"
        ],
        "lastAnalyzed": "2025-02-15T13:25:30",
        "functions": [
          {
            "returns": "The data returned by the Cloud Function.",
            "params": [
              "data: InvitationEmailData"
            ],
            "purpose": "Sends an email invitation using a callable Firebase Cloud Function.",
            "dependencies": [
              "firebase/functions",
              "../config/firebase",
              "sendInvitation Cloud Function"
            ],
            "name": "sendEmailInvitation",
            "stateInteractions": {
              "reads": [
                "data"
              ],
              "writes": []
            }
          }
        ],
        "classes": [],
        "imports": [
          "firebase/functions",
          "../config/firebase"
        ],
        "exports": [
          "sendEmailInvitation"
        ],
        "language": "ts",
        "size": 916
      },
      "src/services/firebase.ts": {
        "description": "Initializes Firebase services (auth, Firestore, Realtime Database, and Functions) for the application. It also sets up persistence for authentication and Firestore, handling potential errors during persistence setup.  Includes debug logging for development.",
        "features": [
          "external dependencies",
          "exports"
        ],
        "dependencies": [
          "firebase/app",
          "firebase/auth",
          "firebase/firestore",
          "firebase/database",
          "firebase/functions"
        ],
        "lastAnalyzed": "2025-02-16T19:50:50",
        "functions": [],
        "classes": [],
        "imports": [
          "firebase/app",
          "firebase/auth",
          "firebase/firestore",
          "firebase/database",
          "firebase/functions"
        ],
        "exports": [
          "app",
          "auth",
          "db",
          "database",
          "functions"
        ],
        "language": "ts",
        "size": 1984
      },
      "src/services/geminiFrontend.ts": {
        "description": "This code defines a service for interacting with the Google Gemini API to generate AI summaries. It includes an interface for the expected response structure and an asynchronous function to make requests to the API.",
        "features": [
          "function definitions"
        ],
        "dependencies": [],
        "lastAnalyzed": "2025-02-20T20:35:38",
        "functions": [
          {
            "purpose": "Generates an AI summary using the Google Gemini API.",
            "dependencies": [
              "Gemini API",
              "process.env.REACT_APP_GEMINI_API_KEY"
            ],
            "params": [
              "content",
              "filePath",
              "customPrompt"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": [
                "process.env.REACT_APP_GEMINI_API_KEY",
                "content",
                "customPrompt"
              ]
            },
            "name": "generateAISummary",
            "returns": "A Promise that resolves to a GeminiResponse object."
          }
        ],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "ts",
        "size": 2033
      },
      "src/services/github.ts": {
        "description": "This code provides services for interacting with GitHub, including storing and retrieving GitHub tokens, fetching repositories, retrieving file content using the GitHub API, and syncing repositories using Firebase Cloud Functions. It leverages Firebase Firestore for token storage and repository file metadata.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "../config/firebase",
          "firebase/functions",
          "firebase/firestore",
          "../config/firebase",
          "../types/repository",
          "@octokit/rest"
        ],
        "lastAnalyzed": "2025-02-20T20:35:38",
        "functions": [
          {
            "returns": "The result of the Cloud Function call.",
            "stateInteractions": {
              "reads": [],
              "writes": [
                "secure_tokens collection"
              ]
            },
            "params": [
              "token",
              "accountId"
            ],
            "dependencies": [
              "storeGithubTokenFunction",
              "firebase/functions"
            ],
            "purpose": "Stores a GitHub token in Firestore for a given account ID using a Cloud Function.",
            "name": "storeGithubToken"
          },
          {
            "name": "getToken",
            "params": [
              "accountId"
            ],
            "purpose": "Retrieves a GitHub token from Firestore for a given account ID.",
            "dependencies": [
              "firebase/firestore"
            ],
            "stateInteractions": {
              "writes": [],
              "reads": [
                "secure_tokens collection"
              ]
            },
            "returns": "The GitHub token (string) or null if not found."
          },
          {
            "dependencies": [
              "firebase/firestore"
            ],
            "name": "clearToken",
            "returns": "void",
            "params": [
              "accountId"
            ],
            "purpose": "Deletes a GitHub token from Firestore for a given account ID.",
            "stateInteractions": {
              "reads": [],
              "writes": [
                "secure_tokens collection"
              ]
            }
          },
          {
            "returns": "A boolean indicating whether the token is valid.",
            "dependencies": [
              "fetch"
            ],
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "purpose": "Validates a GitHub token by making a request to the GitHub API.",
            "name": "validateToken",
            "params": [
              "token"
            ]
          },
          {
            "params": [
              "accountId"
            ],
            "dependencies": [
              "getToken",
              "fetch"
            ],
            "purpose": "Fetches a user's GitHub repositories using their stored token.",
            "returns": "An array of GitHubRepo objects.",
            "name": "fetchUserRepositories",
            "stateInteractions": {
              "reads": [
                "secure_tokens collection"
              ],
              "writes": []
            }
          },
          {
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "returns": "The result of the Cloud Function call.",
            "purpose": "Syncs a GitHub repository using a Cloud Function.",
            "name": "syncRepository",
            "params": [
              "repositoryName",
              "accountId"
            ],
            "dependencies": [
              "syncRepoFunction",
              "firebase/functions"
            ]
          },
          {
            "name": "getFileContent",
            "params": [
              "repoFullName",
              "filePath",
              "accountId"
            ],
            "dependencies": [
              "firebase/firestore",
              "@octokit/rest"
            ],
            "purpose": "Retrieves the content of a file from a GitHub repository using the Octokit library.",
            "returns": "The content of the file as a string.",
            "stateInteractions": {
              "reads": [
                "secure_tokens collection"
              ],
              "writes": []
            }
          },
          {
            "name": "getRepositoryFiles",
            "returns": "An array of RepositoryFile objects.",
            "dependencies": [
              "firebase/firestore"
            ],
            "purpose": "Retrieves repository file metadata from Firestore.",
            "stateInteractions": {
              "reads": [
                "repositories collection"
              ],
              "writes": []
            },
            "params": [
              "repoFullName"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "../config/firebase",
          "firebase/functions",
          "firebase/firestore",
          "../config/firebase",
          "../types/repository",
          "@octokit/rest"
        ],
        "exports": [
          "storeGithubToken",
          "getToken",
          "clearToken",
          "validateToken",
          "fetchUserRepositories",
          "syncRepository"
        ],
        "language": "ts",
        "size": 6096
      },
      "src/services/ticketService.ts": {
        "description": "Provides CRUD operations for tickets, using both Firestore and Realtime Database.  There appears to be a mix of old and new implementations, with some functions duplicated and targeting different database paths.  The Firestore implementation seems older and less used.  The Realtime Database functionality has duplicate CRUD operations, one set working with 'tickets' path and the other with 'channels/tickets'.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "firebase/firestore",
          "./firebase",
          "../types/ticket",
          "firebase/auth",
          "../config/firebase",
          "firebase/database"
        ],
        "lastAnalyzed": "2025-02-08T11:51:36",
        "functions": [
          {
            "dependencies": [
              "firebase/firestore",
              "firebase/auth",
              "./firebase"
            ],
            "stateInteractions": {
              "writes": [
                "tickets collection in Firestore"
              ],
              "reads": [
                "auth.currentUser"
              ]
            },
            "returns": "Promise<DocumentReference<DocumentData>>",
            "params": [
              "ticket: Omit<Ticket, 'id'>"
            ],
            "name": "createTicket (Firestore)",
            "purpose": "Creates a new ticket in Firestore."
          },
          {
            "params": [
              "id: string",
              "ticket: Partial<Ticket>"
            ],
            "dependencies": [
              "firebase/firestore",
              "./firebase"
            ],
            "returns": "Promise<void>",
            "name": "updateTicket (Firestore)",
            "purpose": "Updates an existing ticket in Firestore.",
            "stateInteractions": {
              "writes": [
                "ticket document in Firestore"
              ],
              "reads": [
                "ticket document in Firestore"
              ]
            }
          },
          {
            "dependencies": [
              "firebase/firestore",
              "./firebase"
            ],
            "params": [
              "id: string"
            ],
            "purpose": "Deletes a ticket from Firestore.",
            "returns": "Promise<void>",
            "stateInteractions": {
              "reads": [],
              "writes": [
                "tickets collection in Firestore (delete)"
              ]
            },
            "name": "deleteTicket (Firestore)"
          },
          {
            "params": [
              "id: string"
            ],
            "returns": "Promise<Ticket | null>",
            "stateInteractions": {
              "writes": [],
              "reads": [
                "ticket document in Firestore"
              ]
            },
            "dependencies": [
              "firebase/firestore",
              "./firebase"
            ],
            "name": "getTicket (Firestore)",
            "purpose": "Retrieves a ticket from Firestore."
          },
          {
            "params": [],
            "stateInteractions": {
              "reads": [
                "tickets data in Realtime Database"
              ],
              "writes": []
            },
            "returns": "Promise<Ticket[]>",
            "purpose": "Fetches all tickets from Realtime Database ('tickets' path).",
            "dependencies": [
              "firebase/database",
              "../config/firebase"
            ],
            "name": "fetchTickets"
          },
          {
            "returns": "() => void (unsubscribe function)",
            "purpose": "Subscribes to real-time updates of tickets from Realtime Database ('tickets' path).",
            "dependencies": [
              "firebase/database",
              "../config/firebase"
            ],
            "params": [
              "callback: (tickets: Ticket[]) => void"
            ],
            "stateInteractions": {
              "reads": [
                "tickets data in Realtime Database"
              ],
              "writes": []
            },
            "name": "subscribeToTickets"
          },
          {
            "stateInteractions": {
              "reads": [],
              "writes": [
                "tickets data in Realtime Database"
              ]
            },
            "returns": "Promise<string>",
            "purpose": "Creates a new ticket in Realtime Database ('tickets' path).",
            "name": "createTicket (Realtime Database)",
            "dependencies": [
              "firebase/database",
              "../config/firebase"
            ],
            "params": [
              "ticket: Omit<Ticket, 'id'>"
            ]
          },
          {
            "purpose": "Updates a ticket in Realtime Database ('channels/tickets' path).",
            "params": [
              "ticketId: string",
              "updates: Partial<Ticket>"
            ],
            "dependencies": [
              "firebase/database",
              "../config/firebase"
            ],
            "stateInteractions": {
              "reads": [],
              "writes": [
                "channels/tickets data in Realtime Database"
              ]
            },
            "returns": "Promise<void>",
            "name": "updateTicket (Realtime Database)"
          },
          {
            "returns": "Promise<void>",
            "dependencies": [
              "firebase/database",
              "../config/firebase"
            ],
            "purpose": "Deletes a ticket from Realtime Database ('channels/tickets' path).",
            "stateInteractions": {
              "writes": [
                "channels/tickets data in Realtime Database (sets to null)"
              ],
              "reads": []
            },
            "params": [
              "ticketId: string"
            ],
            "name": "deleteTicket (Realtime Database)"
          },
          {
            "name": "getTicket (Realtime Database)",
            "returns": "Promise<Ticket | null>",
            "stateInteractions": {
              "reads": [
                "channels/tickets data in Realtime Database"
              ],
              "writes": []
            },
            "purpose": "Retrieves a ticket from Realtime Database ('channels/tickets' path).",
            "dependencies": [
              "firebase/database",
              "../config/firebase"
            ],
            "params": [
              "ticketId: string"
            ]
          }
        ],
        "classes": [],
        "imports": [
          "firebase/firestore",
          "./firebase",
          "../types/ticket",
          "firebase/auth",
          "../config/firebase",
          "firebase/database"
        ],
        "exports": [
          "ticketService",
          "fetchTickets",
          "subscribeToTickets",
          "createTicket",
          "updateTicket",
          "deleteTicket",
          "getTicket"
        ],
        "language": "ts",
        "size": 4541
      },
      "src/setupTests.ts": {
        "description": "Sets up Jest DOM matchers for testing React components. This allows for assertions on DOM nodes like checking text content.",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2024-10-19T20:51:47",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "ts",
        "size": 241
      },
      "src/styles/animations.ts": {
        "description": "This file defines a collection of reusable CSS animation classes and transition properties using Tailwind CSS utility classes.",
        "features": [
          "exports"
        ],
        "dependencies": [],
        "lastAnalyzed": "2025-02-08T13:17:47",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [
          "animations"
        ],
        "language": "ts",
        "size": 397
      },
      "src/styles/index.ts": {
        "description": "Exports styling modules for theme, layout, and animations.",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-08T13:17:47",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "ts",
        "size": 81
      },
      "src/styles/layout.ts": {
        "description": "Provides a set of reusable Tailwind CSS utility class names for common layout patterns, including containers, sections, grids, and flexbox arrangements.",
        "features": [
          "exports"
        ],
        "dependencies": [],
        "lastAnalyzed": "2025-02-08T11:51:36",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [
          "layout"
        ],
        "language": "ts",
        "size": 635
      },
      "src/styles/theme.ts": {
        "description": "This code defines a theme and common styles for a web application using a dark and light mode approach. It leverages CSS-in-JS styling through template literals and provides a structured set of colors, spacing, border radii, and typography styles.  It also incorporates animations from a separate module.",
        "features": [
          "external dependencies",
          "exports"
        ],
        "dependencies": [
          "./animations"
        ],
        "lastAnalyzed": "2025-02-19T08:17:24",
        "functions": [],
        "classes": [],
        "imports": [
          "./animations"
        ],
        "exports": [
          "theme",
          "commonStyles",
          "typography"
        ],
        "language": "ts",
        "size": 7271
      },
      "src/styles/typography.ts": {
        "description": "Defines a set of typography styles as a JavaScript object for consistent styling across the application.  Leverages Tailwind CSS classes for styling.",
        "features": [
          "exports"
        ],
        "dependencies": [],
        "lastAnalyzed": "2025-02-08T11:51:36",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [
          "typography"
        ],
        "language": "ts",
        "size": 470
      },
      "src/tsconfig.json ": {
        "description": "tsconfig.json  file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-15T13:25:30",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "json ",
        "size": 350
      },
      "src/types/account.ts": {
        "description": "Defines the TypeScript interface for an Account, including its properties like ID, name, timestamps, owner, settings, and members with their roles and join dates.",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-11T23:04:00",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "ts",
        "size": 363
      },
      "src/types/board/columns.ts": {
        "description": "Defines types and initial states for backlog and development columns in a Kanban-like board.  It uses enums for column statuses and provides initial data structures for each column type.",
        "features": [
          "external dependencies",
          "exports"
        ],
        "dependencies": [
          "./index"
        ],
        "lastAnalyzed": "2025-02-15T16:14:45",
        "functions": [],
        "classes": [],
        "imports": [
          "./index"
        ],
        "exports": [
          "COLUMN_STATUS_LABELS",
          "backlogColumns",
          "developmentColumns"
        ],
        "language": "ts",
        "size": 1241
      },
      "src/types/board/index.ts": {
        "description": "Defines types related to a Kanban-style board for managing tickets, including status types, column structures, and type aliases for backlog and development columns.",
        "features": [
          "external dependencies"
        ],
        "dependencies": [
          "../ticket"
        ],
        "lastAnalyzed": "2025-02-15T16:14:45",
        "functions": [],
        "classes": [],
        "imports": [
          "../ticket"
        ],
        "exports": [],
        "language": "ts",
        "size": 565
      },
      "src/types/message.ts": {
        "description": "Defines TypeScript interfaces for message data, including reactions and timestamps.  Uses Firestore timestamps. Designed for real-time chat or messaging applications.",
        "features": [
          "external dependencies"
        ],
        "dependencies": [
          "firebase/firestore"
        ],
        "lastAnalyzed": "2025-02-19T18:46:04",
        "functions": [],
        "classes": [],
        "imports": [
          "firebase/firestore"
        ],
        "exports": [],
        "language": "ts",
        "size": 505
      },
      "src/types/react-responsive-modal.d.ts": {
        "description": "Provides TypeScript definitions for the `react-responsive-modal` library, defining the props for the `Modal` component and its usage.",
        "features": [
          "external dependencies",
          "class definitions",
          "exports"
        ],
        "dependencies": [
          "react"
        ],
        "lastAnalyzed": "2025-02-10T20:41:17",
        "functions": [],
        "classes": [
          {
            "name": "Modal",
            "dependencies": [
              "react-responsive-modal"
            ],
            "methods": [],
            "purpose": "A React component that provides a modal dialog.",
            "properties": [
              "open",
              "onClose",
              "center",
              "closeOnEsc",
              "closeOnOverlayClick",
              "classNames",
              "children",
              "showCloseIcon",
              "closeIcon",
              "styles",
              "animationDuration",
              "blockScroll"
            ]
          }
        ],
        "imports": [
          "react"
        ],
        "exports": [
          "Modal"
        ],
        "language": "ts",
        "size": 892
      },
      "src/types/repository.ts": {
        "description": "Defines TypeScript interfaces for representing files and repositories, including metadata and status information.  Useful for managing code repositories and their contents.",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-19T08:17:24",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "ts",
        "size": 903
      },
      "src/types/ticket.ts": {
        "description": "Defines TypeScript types for a ticket, including its properties like ID, title, description, status, priority, assignee, type, creator, timestamps, and order. It leverages union types for status and enum-like types for priority and type.  Tickets are associated with an account ID.",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-15T16:14:45",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "ts",
        "size": 662
      },
      "src/types/user.ts": {
        "description": "Defines the TypeScript interfaces for user objects, including a custom user interface extending a Firebase user.",
        "features": [
          "external dependencies"
        ],
        "dependencies": [
          "firebase/auth"
        ],
        "lastAnalyzed": "2025-02-15T14:35:59",
        "functions": [],
        "classes": [],
        "imports": [
          "firebase/auth"
        ],
        "exports": [],
        "language": "ts",
        "size": 210
      },
      "src/utils/dateUtils.ts": {
        "description": "Utility functions for handling timestamps, converting them to dates, and formatting them for display in messages. Primarily designed for handling Firestore timestamps.",
        "features": [
          "external dependencies",
          "function definitions",
          "exports"
        ],
        "dependencies": [
          "firebase/firestore"
        ],
        "lastAnalyzed": "2025-02-19T18:46:04",
        "functions": [
          {
            "purpose": "Converts a Firestore Timestamp or number to milliseconds.",
            "params": [
              "timestamp (number | Timestamp)"
            ],
            "dependencies": [],
            "returns": "number representing milliseconds",
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "name": "getTimestampMillis"
          },
          {
            "params": [
              "timestamp (number | Timestamp)"
            ],
            "returns": "Date object",
            "name": "timestampToDate",
            "purpose": "Converts a Firestore Timestamp or number to a Date object.",
            "stateInteractions": {
              "writes": [],
              "reads": []
            },
            "dependencies": [
              "getTimestampMillis"
            ]
          },
          {
            "dependencies": [
              "timestampToDate"
            ],
            "name": "formatMessageDate",
            "purpose": "Formats a timestamp for display in a message context (e.g., 'Today', 'Yesterday', 'Monday', or the full date).",
            "stateInteractions": {
              "reads": [],
              "writes": []
            },
            "params": [
              "timestamp (number | Timestamp)"
            ],
            "returns": "Formatted date string"
          }
        ],
        "classes": [],
        "imports": [
          "firebase/firestore"
        ],
        "exports": [
          "getTimestampMillis",
          "timestampToDate",
          "formatMessageDate"
        ],
        "language": "ts",
        "size": 1092
      },
      "tailwind.config.js": {
        "description": "Tailwind CSS configuration file. Defines color extensions, dark mode support, and includes the typography plugin.",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-10T21:07:15",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "js",
        "size": 290
      },
      "tsconfig.json": {
        "description": "tsconfig.json file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-02-18T19:51:31",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "json",
        "size": 653
      },
      "ui-debug.log": {
        "description": "ui-debug.log file",
        "features": [],
        "dependencies": [],
        "lastAnalyzed": "2025-01-05T21:54:46",
        "functions": [],
        "classes": [],
        "imports": [],
        "exports": [],
        "language": "log",
        "size": 80
      }
    },
    "directories": {
      "backend": {
        "purpose": "Contains null files",
        "patterns": [
          "*.gitignore"
        ],
        "files": [
          "backend/.gitignore",
          "backend/package.json",
          "backend/tsconfig.json"
        ],
        "summary": "Directory containing 3 /json files with ."
      },
      "backend/src": {
        "purpose": "Contains ts files",
        "patterns": [
          "*.ts"
        ],
        "files": [
          "backend/src/index.ts"
        ],
        "summary": "Directory containing 1 ts files with external dependencies, function definitions, exports."
      },
      "backend/src/routes": {
        "purpose": "Contains ts files",
        "patterns": [
          "*.ts"
        ],
        "files": [
          "backend/src/routes/repository.ts"
        ],
        "summary": "Directory containing 1 ts files with external dependencies, function definitions."
      },
      "functions": {
        "purpose": "Contains js files",
        "patterns": [
          "*.js"
        ],
        "files": [
          "functions/.eslintrc.js",
          "functions/.gitignore",
          "functions/index.js",
          "functions/package-lock.json",
          "functions/package.json",
          "functions/requirements.txt",
          "functions/setup_repo_indexer.sh",
          "functions/tsconfig.json"
        ],
        "summary": "Directory containing 8 js//json/txt/sh files with function definitions."
      },
      "functions/repository-indexer": {
        "purpose": "Contains example files",
        "patterns": [
          "*.example"
        ],
        "files": [
          "functions/repository-indexer/.env.example",
          "functions/repository-indexer/.gitignore",
          "functions/repository-indexer/code-prompt.py",
          "functions/repository-indexer/pytest.ini",
          "functions/repository-indexer/requirements.txt"
        ],
        "summary": "Directory containing 5 example//py/ini/txt files with external dependencies, function definitions."
      },
      "functions/repository-indexer/src": {
        "purpose": "Contains py files",
        "patterns": [
          "*.py"
        ],
        "files": [
          "functions/repository-indexer/src/__init__.py",
          "functions/repository-indexer/src/cleanup.py",
          "functions/repository-indexer/src/cli.py",
          "functions/repository-indexer/src/config.py",
          "functions/repository-indexer/src/firestore_service.py",
          "functions/repository-indexer/src/github_service.py",
          "functions/repository-indexer/src/main.py",
          "functions/repository-indexer/src/test_paths.py"
        ],
        "summary": "Directory containing 8 py files with function definitions, external dependencies, class definitions."
      },
      "functions/repository-indexer/src/services": {
        "purpose": "Contains ts files",
        "patterns": [
          "*.ts"
        ],
        "files": [
          "functions/repository-indexer/src/services/api.ts",
          "functions/repository-indexer/src/services/firestore_service.py",
          "functions/repository-indexer/src/services/gemini_service.py",
          "functions/repository-indexer/src/services/github_service.py"
        ],
        "summary": "Directory containing 4 ts/py files with function definitions, exports, external dependencies, class definitions."
      },
      "functions/repository-indexer/tests": {
        "purpose": "Contains py files",
        "patterns": [
          "*.py"
        ],
        "files": [
          "functions/repository-indexer/tests/__init__.py",
          "functions/repository-indexer/tests/test_gemini_service.py",
          "functions/repository-indexer/tests/test_github_service.py"
        ],
        "summary": "Directory containing 3 py files with external dependencies, function definitions."
      },
      "functions/src": {
        "purpose": "Contains ts files",
        "patterns": [
          "*.ts"
        ],
        "files": [
          "functions/src/index.ts"
        ],
        "summary": "Directory containing 1 ts files with external dependencies, function definitions, exports."
      },
      "functions/src/services": {
        "purpose": "Contains ts files",
        "patterns": [
          "*.ts"
        ],
        "files": [
          "functions/src/services/gemini.ts"
        ],
        "summary": "Directory containing 1 ts files with function definitions."
      },
      "public": {
        "purpose": "Contains ico files",
        "patterns": [
          "*.ico"
        ],
        "files": [
          "public/favicon.ico",
          "public/index.html",
          "public/logo192.png",
          "public/logo512.png",
          "public/manifest.json",
          "public/qeek-logo.png",
          "public/robots.txt"
        ],
        "summary": "Directory containing 7 ico/html/png/json/txt files with ."
      },
      "src": {
        "purpose": "Contains css files",
        "patterns": [
          "*.css"
        ],
        "files": [
          "src/App.css",
          "src/App.test.tsx",
          "src/App.tsx",
          "src/index.css",
          "src/index.tsx",
          "src/logo.svg",
          "src/react-app-env.d.ts",
          "src/reportWebVitals.ts",
          "src/setupTests.ts",
          "src/tsconfig.json "
        ],
        "summary": "Directory containing 10 css/tsx/svg/ts/json  files with external dependencies, function definitions."
      },
      "src/components/Auth": {
        "purpose": "Contains tsx files",
        "patterns": [
          "*.tsx"
        ],
        "files": [
          "src/components/Auth/Login.tsx",
          "src/components/Auth/Register.tsx"
        ],
        "summary": "Directory containing 2 tsx files with external dependencies, function definitions."
      },
      "src/components/Chat": {
        "purpose": "Contains tsx files",
        "patterns": [
          "*.tsx"
        ],
        "files": [
          "src/components/Chat/ChatInterface.tsx",
          "src/components/Chat/EmojiPicker.tsx",
          "src/components/Chat/MessageInput.tsx",
          "src/components/Chat/MessageList.tsx"
        ],
        "summary": "Directory containing 4 tsx files with external dependencies, function definitions, class definitions."
      },
      "src/components/Codebase": {
        "purpose": "Contains tsx files",
        "patterns": [
          "*.tsx"
        ],
        "files": [
          "src/components/Codebase/CodebaseViewer.tsx",
          "src/components/Codebase/FileExtractionTool.tsx",
          "src/components/Codebase/FileViewer.tsx"
        ],
        "summary": "Directory containing 3 tsx files with external dependencies, function definitions, exports."
      },
      "src/components/Codebase/components": {
        "purpose": "Contains tsx files",
        "patterns": [
          "*.tsx"
        ],
        "files": [
          "src/components/Codebase/components/ExpandableCell.tsx",
          "src/components/Codebase/components/FileIcon.tsx"
        ],
        "summary": "Directory containing 2 tsx files with external dependencies, function definitions, exports."
      },
      "src/components/Codebase/utils": {
        "purpose": "Contains ts files",
        "patterns": [
          "*.ts"
        ],
        "files": [
          "src/components/Codebase/utils/formatters.ts",
          "src/components/Codebase/utils/index.tsx"
        ],
        "summary": "Directory containing 2 ts/tsx files with function definitions, exports, external dependencies."
      },
      "src/components": {
        "purpose": "Contains tsx files",
        "patterns": [
          "*.tsx"
        ],
        "files": [
          "src/components/Layout.tsx"
        ],
        "summary": "Directory containing 1 tsx files with external dependencies, function definitions."
      },
      "src/components/Navigation": {
        "purpose": "Contains tsx files",
        "patterns": [
          "*.tsx"
        ],
        "files": [
          "src/components/Navigation/Sidebar.tsx"
        ],
        "summary": "Directory containing 1 tsx files with external dependencies, function definitions, exports."
      },
      "src/components/Settings": {
        "purpose": "Contains tsx files",
        "patterns": [
          "*.tsx"
        ],
        "files": [
          "src/components/Settings/AdminSettings.tsx",
          "src/components/Settings/GitHubSettings.tsx",
          "src/components/Settings/SettingsLayout.tsx",
          "src/components/Settings/UserManagement.tsx",
          "src/components/Settings/UserProfile.tsx",
          "src/components/Settings/index.ts"
        ],
        "summary": "Directory containing 6 tsx/ts files with external dependencies, function definitions."
      },
      "src/components/Tickets": {
        "purpose": "Contains tsx files",
        "patterns": [
          "*.tsx"
        ],
        "files": [
          "src/components/Tickets/TicketBoard.tsx",
          "src/components/Tickets/TicketEdit.tsx",
          "src/components/Tickets/TicketForm.tsx",
          "src/components/Tickets/TicketList.tsx",
          "src/components/Tickets/TicketModal.tsx",
          "src/components/Tickets/TicketViewSwitch.tsx",
          "src/components/Tickets/TicketsContainer.tsx",
          "src/components/Tickets/index.ts"
        ],
        "summary": "Directory containing 8 tsx/ts files with external dependencies, function definitions, exports."
      },
      "src/components/ui": {
        "purpose": "Contains tsx files",
        "patterns": [
          "*.tsx"
        ],
        "files": [
          "src/components/ui/avatar.tsx",
          "src/components/ui/button.tsx",
          "src/components/ui/command.tsx",
          "src/components/ui/dialog.tsx",
          "src/components/ui/dropdown-menu.tsx",
          "src/components/ui/input.tsx",
          "src/components/ui/popover.tsx",
          "src/components/ui/scroll-area.tsx",
          "src/components/ui/textarea.tsx",
          "src/components/ui/tooltip.tsx"
        ],
        "summary": "Directory containing 10 tsx files with external dependencies, class definitions, function definitions."
      },
      "src/config": {
        "purpose": "Contains ts files",
        "patterns": [
          "*.ts"
        ],
        "files": [
          "src/config/firebase.ts"
        ],
        "summary": "Directory containing 1 ts files with external dependencies, exports."
      },
      "src/context": {
        "purpose": "Contains tsx files",
        "patterns": [
          "*.tsx"
        ],
        "files": [
          "src/context/AccountContext.tsx",
          "src/context/AuthContext.tsx",
          "src/context/CodebaseContext.tsx"
        ],
        "summary": "Directory containing 3 tsx files with external dependencies, function definitions, exports."
      },
      "src/hooks": {
        "purpose": "Contains ts files",
        "patterns": [
          "*.ts"
        ],
        "files": [
          "src/hooks/useTickets.ts"
        ],
        "summary": "Directory containing 1 ts files with external dependencies, function definitions, exports."
      },
      "src/migrations": {
        "purpose": "Contains ts files",
        "patterns": [
          "*.ts"
        ],
        "files": [
          "src/migrations/index.ts"
        ],
        "summary": "Directory containing 1 ts files with external dependencies, function definitions, exports."
      },
      "src/migrations/tickets": {
        "purpose": "Contains ts files",
        "patterns": [
          "*.ts"
        ],
        "files": [
          "src/migrations/tickets/add-account-id.ts"
        ],
        "summary": "Directory containing 1 ts files with external dependencies, function definitions."
      },
      "src/pages": {
        "purpose": "Contains tsx files",
        "patterns": [
          "*.tsx"
        ],
        "files": [
          "src/pages/InvitationPage.tsx",
          "src/pages/LoginPage.tsx",
          "src/pages/RegisterPage.tsx"
        ],
        "summary": "Directory containing 3 tsx files with external dependencies, function definitions."
      },
      "src/routes": {
        "purpose": "Contains tsx files",
        "patterns": [
          "*.tsx"
        ],
        "files": [
          "src/routes/settings.tsx"
        ],
        "summary": "Directory containing 1 tsx files with external dependencies, exports."
      },
      "src/services": {
        "purpose": "Contains ts files",
        "patterns": [
          "*.ts"
        ],
        "files": [
          "src/services/api.ts",
          "src/services/auth.ts",
          "src/services/chat.ts",
          "src/services/email.ts",
          "src/services/firebase.ts",
          "src/services/geminiFrontend.ts",
          "src/services/github.ts",
          "src/services/ticketService.ts"
        ],
        "summary": "Directory containing 8 ts files with function definitions, exports, external dependencies."
      },
      "src/styles": {
        "purpose": "Contains ts files",
        "patterns": [
          "*.ts"
        ],
        "files": [
          "src/styles/animations.ts",
          "src/styles/index.ts",
          "src/styles/layout.ts",
          "src/styles/theme.ts",
          "src/styles/typography.ts"
        ],
        "summary": "Directory containing 5 ts files with exports, external dependencies."
      },
      "src/types": {
        "purpose": "Contains ts files",
        "patterns": [
          "*.ts"
        ],
        "files": [
          "src/types/account.ts",
          "src/types/message.ts",
          "src/types/react-responsive-modal.d.ts",
          "src/types/repository.ts",
          "src/types/ticket.ts",
          "src/types/user.ts"
        ],
        "summary": "Directory containing 6 ts files with external dependencies, class definitions, exports."
      },
      "src/types/board": {
        "purpose": "Contains ts files",
        "patterns": [
          "*.ts"
        ],
        "files": [
          "src/types/board/columns.ts",
          "src/types/board/index.ts"
        ],
        "summary": "Directory containing 2 ts files with external dependencies, exports."
      },
      "src/utils": {
        "purpose": "Contains ts files",
        "patterns": [
          "*.ts"
        ],
        "files": [
          "src/utils/dateUtils.ts"
        ],
        "summary": "Directory containing 1 ts files with external dependencies, function definitions, exports."
      }
    }
  }